<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何使用讯飞ai和ai常用技巧</title>
      <link href="/posts/e09b9d02.html"/>
      <url>/posts/e09b9d02.html</url>
      
        <content type="html"><![CDATA[<p>参考文章：</p><div class="tag link"><a class="link-card" title="如何使用api接入星火大模型" href="https://blog.csdn.net/weixin_56649281/article/details/136569427"><div class="left"><img src="https://imgse.com/i/pkf2su4"/></div><div class="right"><p class="text">如何使用api接入星火大模型</p><p class="url">https://blog.csdn.net/weixin_56649281/article/details/136569427</p></div></a></div><h2 id="1-接入讯飞ai">1. 接入讯飞ai</h2><hr><h2 id=""></h2><h3 id="1-1-进入星火：https-xinghuo-xfyun-cn-desk">1.1 进入星火：<a href="https://xinghuo.xfyun.cn/desk">https://xinghuo.xfyun.cn/desk</a></h3><p><a href="https://imgse.com/i/pkf2su4"><img src="https://s21.ax1x.com/2024/07/09/pkf2su4.png" alt="pkf2su4.png"></a></p><hr><h3 id="1-2-注册账号-创建应用">1.2  注册账号,创建应用</h3><p><a href="https://imgse.com/i/pkfRnr4"><img src="https://s21.ax1x.com/2024/07/10/pkfRnr4.png" alt="pkfRnr4.png"></a></p><p><a href="https://imgse.com/i/pkfRuqJ"><img src="https://s21.ax1x.com/2024/07/10/pkfRuqJ.png" alt="pkfRuqJ.png"></a></p><hr><h3 id="1-3选择你要接入的服务我这里是接入了Spark-Pro服务-进行购买，新手会松一年的免费试用">1.3选择你要接入的服务我这里是接入了Spark Pro服务 进行购买，新手会松一年的免费试用</h3><p><a href="https://imgse.com/i/pkfcxFP"><img src="https://s21.ax1x.com/2024/07/09/pkfcxFP.png" alt="pkfcxFP.png"></a></p><hr><h3 id="1-3点击创建的应用，查看APPID，APISecret和APIKey">1.3点击创建的应用，查看APPID，APISecret和APIKey</h3><h2 id="2-引入科大讯飞星火认知大模型-Java-SDK">2 引入科大讯飞星火认知大模型 Java SDK</h2><a class="button" href='https://github.com/briqt/xunfei-spark4j' title='讯飞大模型javaSDK'><img src=''>讯飞大模型javaSDK</a><hr><p>使用方式:</p><blockquote><h3 id="引入项目">引入项目</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&lt;!--修改version为最新稳定版--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&gt;&lt;dependency&gt;</span></span><br><span class="line">   <span class="string">&lt;groupId&gt;io.github.briqt&lt;/groupId&gt;</span></span><br><span class="line">   <span class="string">&lt;artifactId&gt;xunfei-spark4j&lt;/artifactId&gt;</span></span><br><span class="line">   <span class="string">&lt;version&gt;1.2.0&lt;/version&gt;</span></span><br><span class="line"><span class="string">&gt;&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure></blockquote><hr><h3 id="创建客户端">创建客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miku.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.briqt.spark4j.SparkClient;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;miku.ai&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XunFeiConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String appid;</span><br><span class="line">    <span class="keyword">private</span> String apikey;</span><br><span class="line">    <span class="keyword">private</span> String secretkey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> SparkClient <span class="title function_">sparkClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SparkClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SparkClient</span>();</span><br><span class="line">        client.appid=appid;</span><br><span class="line">        client.apiKey=apikey;</span><br><span class="line">        client.apiSecret=secretkey;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//记得配置appid apikey secretkey 等 在yaml文件里面 前缀是 miku.ai</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="同步调用">同步调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.miku.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.briqt.spark4j.SparkClient;</span><br><span class="line"><span class="keyword">import</span> io.github.briqt.spark4j.constant.SparkApiVersion;</span><br><span class="line"><span class="keyword">import</span> io.github.briqt.spark4j.exception.SparkException;</span><br><span class="line"><span class="keyword">import</span> io.github.briqt.spark4j.model.SparkMessage;</span><br><span class="line"><span class="keyword">import</span> io.github.briqt.spark4j.model.SparkSyncChatResponse;</span><br><span class="line"><span class="keyword">import</span> io.github.briqt.spark4j.model.request.SparkRequest;</span><br><span class="line"><span class="keyword">import</span> io.github.briqt.spark4j.model.response.SparkTextUsage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SparkUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SparkClient sparkClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步调用ai工具类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> systemContent- 系统预设内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userContent-   用户输入内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  String <span class="title function_">synchronousCalls</span><span class="params">(String systemContent, String userContent)</span> &#123;</span><br><span class="line">        List&lt;SparkMessage&gt; messages = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        messages.add(SparkMessage.systemContent(systemContent));</span><br><span class="line">        messages.add(SparkMessage.userContent(userContent));</span><br><span class="line">        <span class="comment">// 构造请求</span></span><br><span class="line">        <span class="type">SparkRequest</span> <span class="variable">sparkRequest</span> <span class="operator">=</span> SparkRequest.builder()</span><br><span class="line">                <span class="comment">// 消息列表</span></span><br><span class="line">                .messages(messages)</span><br><span class="line">                <span class="comment">// 模型回答的tokens的最大长度,非必传，默认为2048。</span></span><br><span class="line">                <span class="comment">// V1.5取值为[1,4096]</span></span><br><span class="line">                <span class="comment">// V2.0取值为[1,8192]</span></span><br><span class="line">                <span class="comment">// V3.0取值为[1,8192]</span></span><br><span class="line">                .maxTokens(<span class="number">2048</span>)</span><br><span class="line">                <span class="comment">// 核采样阈值。用于决定结果随机性,取值越高随机性越强即相同的问题得到的不同答案的可能性越高 非必传,取值为[0,1],默认为0.5</span></span><br><span class="line">                .temperature(<span class="number">0.2</span>)</span><br><span class="line">                <span class="comment">// 指定请求版本，默认使用最新3.0版本</span></span><br><span class="line">                .apiVersion(SparkApiVersion.V3_0)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 同步调用</span></span><br><span class="line">            <span class="type">SparkSyncChatResponse</span> <span class="variable">chatResponse</span> <span class="operator">=</span> sparkClient.chatSync(sparkRequest);</span><br><span class="line">            <span class="type">SparkTextUsage</span> <span class="variable">textUsage</span> <span class="operator">=</span> chatResponse.getTextUsage();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;\n回答：&quot;</span> + chatResponse.getContent());</span><br><span class="line">            System.out.println(<span class="string">&quot;\n提问tokens：&quot;</span> + textUsage.getPromptTokens()</span><br><span class="line">                    + <span class="string">&quot;，回答tokens：&quot;</span> + textUsage.getCompletionTokens()</span><br><span class="line">                    + <span class="string">&quot;，总消耗tokens：&quot;</span> + textUsage.getTotalTokens());</span><br><span class="line">            <span class="keyword">return</span> chatResponse.getContent();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SparkException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常了：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;调用失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="调用示例">调用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> SparkUtils sparkUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 调用ai服务生成智能生成</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> aiRequest</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@ApiOperation(value = &quot;调用ai服务生成智能生成图表和结论&quot;)</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/generate&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> BaseResponse&lt;String&gt; <span class="title function_">genSmartChart</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile multipartFile,</span></span><br><span class="line"><span class="params">                                             GenerByAiRequest aiRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> aiRequest.getName();</span><br><span class="line">       <span class="type">String</span> <span class="variable">goal</span> <span class="operator">=</span> aiRequest.getGoal();</span><br><span class="line">       <span class="type">String</span> <span class="variable">chartType</span> <span class="operator">=</span> aiRequest.getChartType();</span><br><span class="line"></span><br><span class="line">       <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">       <span class="comment">//用户输入</span></span><br><span class="line">       StringBuilder userInput= <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">       userInput.append(<span class="string">&quot;分析目标:&quot;</span>+goal).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isNotBlank(chartType))&#123;</span><br><span class="line">           userInput.append(<span class="string">&quot;图表类型:&quot;</span>+chartType).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       userInput.append(<span class="string">&quot;名称:&quot;</span>+name).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">       <span class="comment">//校验</span></span><br><span class="line">       ThrowUtils.throwIf(StringUtils.isBlank(goal), ErrorCode.PARAMS_ERROR, <span class="string">&quot;目标不能为空&quot;</span>);</span><br><span class="line">       ThrowUtils.throwIf(StringUtils.isNotBlank(name)&amp;&amp;name.length()&gt;<span class="number">100</span>,ErrorCode.PARAMS_ERROR,<span class="string">&quot;图表名称不能超过100个字符&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//压缩Excel数据</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">excelCsv</span> <span class="operator">=</span> ExcelUtils.excelCsv(multipartFile);</span><br><span class="line">       userInput.append(<span class="string">&quot;数据:&quot;</span>).append(excelCsv).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">       <span class="comment">//读取用户上传的excel文件 并且处理</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sparkUtils.synchronousCalls(AiConstant.MATH_MAP, userInput.toString());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> ResultUtils.success(userInput.toString());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Ai调用技巧">Ai调用技巧</h2><h3 id="1-压缩原始数据">1. 压缩原始数据</h3><blockquote><p>因为别人提供的ai接口有字数限制，所以咱们需要将用户传过来的数据进行压缩， 接口普遍都有输入字数限制。所以我们要尽可能压缩数据，能够允许多传一些数据。</p></blockquote><p>AI压缩除了后台自己压缩外，还可以调用ai服务，让ai帮你进行压缩数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Al提词技巧<span class="number">1</span>:持续输入,持续优化</span><br><span class="line"></span><br><span class="line">第一次问:</span><br><span class="line">我给你三行数据，请帮我分析网站的增长趋势，数据如下:</span><br><span class="line">第一行:日期: <span class="number">1</span>号, 用户数: <span class="number">10</span>人</span><br><span class="line">第二行:日期: <span class="number">2</span>号，用户数: <span class="number">20</span>人</span><br><span class="line">第三行:日期: <span class="number">3</span>号，用户数: <span class="number">30</span>人</span><br><span class="line"></span><br><span class="line">Al答:</span><br><span class="line">根据给出的数据，我们可以看出这个网站的用户数在三天内呈现快速增长的趋势。</span><br><span class="line">具体来说,该网站用户数从第一天的<span class="number">10</span>人增长到第二天的<span class="number">20</span>人，增加了<span class="number">10</span>人，</span><br><span class="line">增长率为<span class="number">100</span>%;相比之下,第三天用户数从第二天的<span class="number">20</span>人增长到第三天的<span class="number">30</span>人，</span><br><span class="line">增加了同样的<span class="number">10</span>人，增长率降至<span class="number">50</span>%。如果这种增长趋势持续下去,我们可以</span><br><span class="line">预期该网站在未来几天内还会继续吸引更多用户。当然，若要得出更加准确</span><br><span class="line">的结论,需要更多数据的支持。</span><br><span class="line"># # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # </span><br><span class="line">AI提词技巧<span class="number">2</span>:数据压缩(内容压缩，比如把很长的内容提取关键词,也可以让Al来做)</span><br><span class="line"></span><br><span class="line">第二次问:</span><br><span class="line">我给你三行数据，请帮我分析网站的增长趋势，数据如下:</span><br><span class="line">表头:日期,用户数</span><br><span class="line"><span class="number">1</span>号,<span class="number">10</span></span><br><span class="line"><span class="number">2</span>号,<span class="number">20</span></span><br><span class="line"><span class="number">3</span>号,<span class="number">30</span></span><br><span class="line"></span><br><span class="line">Al回答:</span><br><span class="line">根据给出的数据，我们可以计算出每日用户增长量:</span><br><span class="line">● 第一天增长了<span class="number">10</span>个新用户;</span><br><span class="line">● 第二天增长了<span class="number">20</span> - <span class="number">10</span>=<span class="number">10</span>个新用户;</span><br><span class="line">● 第三天增长了<span class="number">30</span> - <span class="number">20</span>=<span class="number">10</span>个新用户。</span><br><span class="line">可以看出，每天的用户增长量都相等，呈现一个线性增长趋势。如果这个网站</span><br><span class="line">在未来的时间里能够保持现在的增长速度和策略不变,预计每过一天会增加<span class="number">10</span>个</span><br><span class="line">用户。但需要注意的是,这个预测是基于目前的数据情况，实际情况受到许多因</span><br><span class="line">素的影响，不能完全准确预测未来用户增长。</span><br><span class="line"># # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # </span><br><span class="line">使用Al压缩</span><br><span class="line"></span><br><span class="line">第三次问:</span><br><span class="line">我给你三行数据，请帮我用最少的字数压缩这段数据</span><br><span class="line">第一行:日期: <span class="number">1</span>号, 用户数: <span class="number">10</span>人</span><br><span class="line">第二行:日期: <span class="number">2</span>号，用户数: <span class="number">20</span>人</span><br><span class="line">第三行:日期: <span class="number">3</span>号，用户数: <span class="number">30</span>人</span><br><span class="line"></span><br><span class="line">Al回答:</span><br><span class="line">日期<span class="number">1</span>-<span class="number">3</span>号,用户数分别为<span class="number">10</span>/<span class="number">20</span>/<span class="number">30</span>人</span><br></pre></td></tr></table></figure><hr><h3 id="2-为了让-Al-更好地理解我们的输入，并给出预期精确的输出，需要严格控制我们的提问词。">2. 为了让 Al 更好地理解我们的输入，并给出预期精确的输出，需要严格控制我们的提问词。</h3><ul><li><p>使用系统预设 + 控制输入格式(便于Al精确地理解我们的需求)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">你是一个数据分析师和前端开发专家，接下来我会按照以下固定格式给你提供内容：</span><br><span class="line">分析需求:</span><br><span class="line">&#123;数据分析的需求或者目标&#125;</span><br><span class="line">原始数据:</span><br><span class="line">&#123;csv格式的原始数据，用,作为分隔符&#125;</span><br><span class="line">请根据以上内容，帮我生成数据分析结论和可视化图表代码</span><br><span class="line">分析需求：</span><br><span class="line">分析网站用户的增长情况</span><br><span class="line">原始数据：</span><br><span class="line">日期,用户数</span><br><span class="line"><span class="number">1</span>号,<span class="number">10</span></span><br><span class="line"><span class="number">2</span>号,<span class="number">20</span></span><br><span class="line"><span class="number">3</span>号,<span class="number">30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-控制输出格式-便于-AI-返回的内容能够更加方便地为我们所用">3. 控制输出格式(便于 AI 返回的内容能够更加方便地为我们所用)</h3></li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">你是一个数据分析师和前端开发专家，接下来我会按照以下固定格式给你提供内容：</span></span><br><span class="line"><span class="language-xml">分析需求：</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;数据分析的需求或者目标&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">原始数据：</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;csv格式的原始数据，用,作为分隔符&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">请根据这两部分内容，按照以下指定格式生成内容（此外不要输出任何多余的开头、结尾、注释）</span></span><br><span class="line"><span class="language-xml">【【【【【</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;前端 Echarts V5 的 option 配置对象js代码，合理地将数据进行可视化，不要生成任何多余的内容，比如注释&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">【【【【【</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;明确的数据分析结论、越详细越好，不要生成多余的注释&#125;</span></span><br></pre></td></tr></table></figure><p>生成结论：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">【【【【【</span><br><span class="line">&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">&#x27;网站用户增长情况&#x27;</span>,</span><br><span class="line">        subtext: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        trigger: <span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">        axisPointer: &#123;</span><br><span class="line">            type: <span class="string">&#x27;shadow&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        data: [<span class="string">&#x27;用户数&#x27;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        data: [<span class="string">&#x27;1号&#x27;</span>, <span class="string">&#x27;2号&#x27;</span>, <span class="string">&#x27;3号&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;&#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        name: <span class="string">&#x27;用户数&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        data: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line">【【【【【</span><br><span class="line">根据数据分析可得，该网站用户数量逐日增长，时间越长，用户数量增长越多。</span><br><span class="line">   </span><br></pre></td></tr></table></figure><ul><li>指定一个示例问答，one-shot 或者 few-shot。</li></ul><blockquote><p>one-shot：给 AI 一轮示例问答</p><p>ew-shot：给 AI 多轮示例问答</p></blockquote><h3 id="总结：智能接口实现"><strong>总结：智能接口实现</strong></h3><p><strong>后端流程：</strong></p><ul><li>构造用户请求（用户消息、csv 数据、图表类型）</li><li>调用讯飞大模型sdk，得到 AI 响应结果。</li><li>从 AI 响应结果中，取出需要的信息。</li><li>保存图表到数据库。</li></ul><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>文章结束！</p></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 讯飞星火大模型 </tag>
            
            <tag> ai提问常用技巧 </tag>
            
            <tag> 接入ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java知识体系(二)</title>
      <link href="/posts/a90c23fc.html"/>
      <url>/posts/a90c23fc.html</url>
      
        <content type="html"><![CDATA[<h1>Java 全栈知识点问题汇总（二）</h1><a class="button" href='https://pdai.tech/' title='Java 全栈知识体系'><img src=''>Java 全栈知识体系</a><p>本文参考链接: <a href="https://pdai.tech/">| Java 全栈知识体系 (pdai.tech)</a>大家看这个网站可以学习到很多java相关的知识哦!!!</p><h1>1. Collection</h1><h2 id="1-1-集合有哪些类？">1.1 集合有哪些类？</h2><ul><li>Set<ul><li>TreeSet 基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</li><li>HashSet 基于哈希表实现，支持<strong>快速查找</strong>，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是<strong>不确定</strong>的。</li><li>LinkedHashSet 具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</li></ul></li><li>List<ul><li>ArrayList 基于动态数组实现，支持随机访问。</li><li>Vector 和 ArrayList 类似，但它是<strong>线程安全</strong>的。</li><li>LinkedList 基于<strong>双向链表实现</strong>，只能<strong>顺序访问</strong>，但是可以快速地在链表中间<strong>插入和删除元素</strong>。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</li></ul></li><li>Queue<ul><li>LinkedList 可以用它来实现双向队列。</li><li>PriorityQueue 基于堆结构实现，可以用它来实现优先队列。</li></ul></li></ul><h2 id="1-2-ArrayList的底层？">1.2 ArrayList的底层？</h2><p><em>ArrayList</em>实现了<em>List</em>接口，是顺序容器，即元素存放的数据与放进去的顺序相同，允许放入<code>null</code>元素，底层通过<strong>数组实现</strong>。</p><p>除该类未实现同步外，其余跟<em>Vector</em>大致相同。</p><p>每个<em>ArrayList</em>都有一个容量(capacity)，表示底层数组的实际大小，容器内存储元素的个数不能多于当前容量。当向容器中添加元素时，如果容量不足，容器会自动增大底层数组的大小。</p><p>前面已经提过，Java泛型只是编译器提供的语法糖，所以这里的数组<strong>是一个Object数组</strong>，以便能够容纳任何类型的对象。</p><p><a href="https://imgse.com/i/pkfVE5Q"><img src="https://s21.ax1x.com/2024/07/09/pkfVE5Q.png" alt="pkfVE5Q.png"></a></p><h2 id="1-3-ArrayList自动扩容？">1.3 ArrayList自动扩容？</h2><p>每当向数组中添加元素时，都要去<strong>检查</strong>添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。</p><p>数组扩容通过<strong>ensureCapacity(int minCapacity)方法</strong>来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。</p><p>数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。</p><p>这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。</p><p>当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。</p><p><a href="https://imgse.com/i/pkfVe8s"><img src="https://s21.ax1x.com/2024/07/09/pkfVe8s.md.png" alt="pkfVe8s.md.png"></a></p><h2 id="1-4-ArrayList的Fail-Fast机制？">1.4 ArrayList的Fail-Fast机制？</h2><p>ArrayList也采用了快速失败的机制，通过<strong>记录modCount</strong>参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。</p><h1>2 Map</h1><h2 id="2-1-Map有哪些类？">2.1 Map有哪些类？</h2><ul><li><p><code>TreeMap</code> 基于红黑树实现。</p></li><li><p><code>HashMap</code> 1.7基于哈希表实现，1.8基于数组+链表+红黑树。</p></li><li><p><code>HashTable</code> 和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，<strong>不应该去使用它</strong>。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConcurrentHashMap 的效率会更高(1.7 ConcurrentHashMap 引入了分段锁, 1.8 引入了红黑树)。</p></li></ul><h2 id="2-1-JDK7-HashMap如何实现？">2.1 JDK7 HashMap如何实现？</h2><p>哈希表有两种实现方式，一种开放地址方式(Open addressing)，另一种是冲突链表方式(Separate chaining with linked lists)。<strong>Java7 *HashMap*采用的是冲突链表方式</strong>。</p><p><a href="https://imgse.com/i/pkfVm2n"><img src="https://s21.ax1x.com/2024/07/09/pkfVm2n.png" alt="pkfVm2n.png"></a></p><p>从上图容易看出，如果选择合适的哈希函数，<code>put()</code>和<code>get()</code>方法可以在常数时间内完成。但在对<em>HashMap</em>进行迭代时，需要遍历整个table以及后面跟的冲突链表。因此对于迭代比较频繁的场景，不宜将<em>HashMap</em>的初始大小设的过大。</p><p>有两个参数可以影响<em>HashMap</em>的性能: 初始容量(inital capacity)和负载系数(load factor)。初始容量指定了初始<code>table</code>的大小，负载系数用来指定自动扩容的临界值。当<code>entry</code>的数量超过<code>capacity*load_factor</code>时，容器将自动扩容并重新哈希。对于插入元素较多的场景，将初始容量设大可以减少重新哈希的次数。</p><h2 id="2-2-JDK8-HashMap如何实现？">2.2 JDK8 HashMap如何实现？</h2><p>根据 Java7 HashMap 的介绍，我们知道，查找的时候，根据 hash 值我们能够快速定位到数组的具体下标，但是之后的话，需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决于链表的长度，为 O(n)。</p><p>为了降低这部分的开销，在 Java8 中，当链表中的元素达到了 8 个时，会将链表转换为红黑树，在这些位置进行查找的时候可以降低时间复杂度为 O(logN)。</p><p><img src="https://pdai.tech/images/java/java-collection-hashmap8.png" alt="img"></p><h2 id="2-3-HashSet是如何实现的？">2.3 HashSet是如何实现的？</h2><p><em>HashSet</em>是对<em>HashMap</em>的简单包装，对<em>HashSet</em>的函数调用都会转换成合适的<em>HashMap</em>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashSet是对HashMap的简单包装</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt;</span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;<span class="comment">//HashSet里面有一个HashMap</span></span><br><span class="line">    <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;<span class="comment">//简单的方法转换</span></span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-什么是WeakHashMap">2.4 什么是WeakHashMap?</h2><p>我们都知道Java中内存是通过GC自动管理的，GC会在程序运行过程中自动判断哪些对象是可以被回收的，并在合适的时机进行内存释放。GC判断某个对象是否可被回收的依据是，<strong>是否有有效的引用指向该对象</strong>。如果没有有效引用指向该对象(基本意味着不存在访问该对象的方式)，那么该对象就是可回收的。这里的<strong>有效引用</strong> 并不包括<strong>弱引用</strong>。也就是说，<strong>虽然弱引用可以用来访问对象，但进行垃圾回收时弱引用并不会被考虑在内，仅有弱引用指向的对象仍然会被GC回收</strong>。</p><p>WeakHashMap 内部是通过弱引用来管理entry的，弱引用的特性对应到 WeakHashMap 上意味着什么呢？</p><p><em>WeakHashMap</em> 里的<code>entry</code>可能会被GC自动删除，即使程序员没有调用<code>remove()</code>或者<code>clear()</code>方法。</p><p><strong>WeakHashMap</strong> 的这个特点特别适用于需要缓存的场景**。在缓存场景下，由于内存是有限的，不能缓存所有对象；对象缓存命中可以提高系统效率，但缓存MISS也不会造成错误，因为可以通过计算重新得到。</p><p>想知道更详细请了解：</p><div class="tag link"><a class="link-card" title="Collection 类关系图" href="https://pdai.tech/md/java/collection/java-collection-all.html"><div class="left"><img src="https://bu.dusays.com/2023/09/25/6511980d58e3b.webp"/></div><div class="right"><p class="text">Collection 类关系图</p><p class="url">https://pdai.tech/md/java/collection/java-collection-all.html</p></div></a></div>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java知识体系(一)</title>
      <link href="/posts/63db89e.html"/>
      <url>/posts/63db89e.html</url>
      
        <content type="html"><![CDATA[<h1>Java 全栈知识点问题汇总（一）</h1><a class="button" href='https://pdai.tech/' title='Java 全栈知识体系'><img src=''>Java 全栈知识体系</a><p>本文参考链接: <a href="https://pdai.tech/">| Java 全栈知识体系 (pdai.tech)</a>大家看这个网站可以学习到很多java相关的知识哦!!!</p><h2 id="1-java基础">1.java基础</h2><h3 id="1-1-语法基础">1.1 语法基础</h3><h4 id="面向对象特性">面向对象特性?</h4><ul><li><strong>封装</strong></li></ul><p>​     利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p><p>优点:</p><ul><li>减少耦合: 可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担: 可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li><li>有效地调节性能: 可以通过剖析确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险: 即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><hr><ul><li>继承</li></ul><p>继承实现了 <strong>IS-A</strong> 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p><p>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。</p><p>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 <strong>向上转型</strong> 。</p><hr><ul><li>多态</li></ul><p>多态分为编译时多态和运行时多态:</p><ul><li>编译时多态主要指<strong>方法的重载</strong></li><li>运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定</li></ul><p>运行时多态有三个条件:</p><ul><li>继承</li><li>覆盖(重写)</li><li>向上转型</li></ul><hr><h4 id="a-a-b-与-a-b-的区别">a = a + b 与 a += b 的区别</h4><p>+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">b = a + b; <span class="comment">// error : cannot convert from int to byte</span></span><br><span class="line">b += a; <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>(因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错)</p><h4 id="3-0-1-0-3-将会返回什么-true-还是-false">3*0.1 == 0.3 将会返回什么? true 还是 false?</h4><p>false，因为有些浮点数不能完全精确的表示出来。</p><h4 id="能在-Switch-中使用-String-吗">能在 Switch 中使用 String 吗?</h4><p>从 Java 7 开始，我们可以在 switch case 中使用字符串，但这仅仅是一个语法糖。内部实现在 switch 中使用字符串的 hash code。</p><h4 id="对equals-和hashCode-的理解">对equals()和hashCode()的理解?</h4><ul><li><strong>为什么在重写 equals 方法的时候需要重写 hashCode 方法</strong>?</li></ul><p>因为有强制的规范指定需要同时重写 hashcode 与 equals 是方法，许多容器类，如 HashMap、HashSet 都依赖于 hashcode 与 equals 的规定。</p><ul><li><strong>有没有可能两个不相等的对象有相同的 hashcode</strong>?</li></ul><p>有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说<strong>如果两个对象相等，必须有相同的hashcode 值</strong>，但是没有关于不相等对象的任何规定。</p><ul><li><strong>两个相同的对象会有不同的 hash code 吗</strong>?</li></ul><p>不能，根据 hash code 的规定，这是不可能的。</p><h4 id="final、finalize-和-finally-的不同之处">final、finalize 和 finally 的不同之处?</h4><ul><li>final 是一个修饰符，可以<strong>修饰变量、方法和类</strong>。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。</li><li>Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的，但是什么时候调用 finalize 没有保证。</li><li>finally 是一个关键字，<strong>与 try 和 catch 一起用于异常的处理</strong>。finally 块一定会被执行，无论在 try 块中是否有发生异常。</li></ul><h4 id="String、StringBuffer与StringBuilder的区别？">String、StringBuffer与StringBuilder的区别？</h4><ul><li>第一点: 可变和适用范围。String<strong>对象是不可变的</strong>，而StringBuffer和StringBuilder<strong>是可变字符序列</strong>。每次对String的操作<strong>相当于生成一个新的String对象</strong>，而对StringBuffer和StringBuilder的操作是<strong>对对象本身的操作</strong>，而不会生成新的对象，所以对于频繁改变内容的字符串避免使用String，因为频繁的生成对象将会对系统性能产生影响。</li><li>第二点: 线程安全。String由于<strong>有final修饰</strong>，是immutable的，安全性是简单而纯粹的。StringBuilder和StringBuffer的区别在于<strong>StringBuilder不保证同步</strong>，也就是说如果需要线程安全需要使用StringBuffer，不需要同步的StringBuilder效率更高。</li></ul><h4 id="接口与抽象类的区别？">接口与抽象类的区别？</h4><ul><li>一个子类只能继承一个抽象类, 但能实现多个接口</li><li>抽象类可以<strong>有</strong>构造方法, 接口<strong>没有</strong>构造方法</li><li>抽象类可以<strong>有</strong>普通成员变量, 接口<strong>没有</strong>普通成员变量</li><li>抽象类和接口<strong>都可有静态成员变量</strong>, 抽象类中静态成员变量<strong>访问类型任意</strong>，接口<strong>只能public static final(默认)</strong></li><li>抽象类<strong>可以没有抽象方法</strong>, 抽象类<strong>可以有普通方法</strong>；接口在JDK8之前都是抽象方法，在<strong>JDK8可以有default方法</strong>，在<strong>JDK9中允许有私有普通方法</strong></li><li>抽象类<strong>可以有静态方法</strong>；接口在<strong>JDK8之前不能有静态方法</strong>，在JDK8中可以有静态方法，且<strong>只能被接口类直接调用</strong>（不能被实现类的对象调用）</li></ul><h4 id="this-super-在构造方法中的区别？">this() &amp; super()在构造方法中的区别？</h4><ul><li>调用super()<strong>必须写在子类构造方法的第一行</strong>, 否则编译不通过</li><li>super从子类调用父类构造, <strong>this在同一类中调用其他构造</strong>均需要<strong>放在第一行</strong>。</li><li>尽管可以用this调用一个构造器, 却<strong>不能调用2个</strong>。</li><li>this和super<strong>不能出现在同一个构造器中</strong>, 否则编译不通过</li><li>this()、super()都<strong>指的对象</strong>,不可以在<strong>static</strong>环境中使用</li><li>本质this<strong>指向本对象的指针</strong>。super是一个<strong>关键字</strong>。</li></ul><h4 id="Java移位运算符？">Java移位运算符？</h4><ul><li><code>&lt;&lt;</code> :左移运算符,<code>x &lt;&lt; 1</code>,相当于x乘以2(不溢出的情况下),低位补0。</li><li><code>&gt;&gt;</code> :带符号右移,<code>x &gt;&gt; 1</code>,相当于x除以2,正数高位补0,负数高位补1。</li><li><code>&gt;&gt;&gt;</code> :无符号右移,忽略符号位,空位都以0补齐。</li></ul><h3 id="1-2-泛型">1.2 泛型</h3><h4 id="为什么需要泛型？">为什么需要泛型？</h4><ol><li><p><strong>适用于多种数据类型执行相同的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">add</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span> &#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果没有泛型，要实现不同类型的加法，每种类型都需要重载一个add方法；通过泛型，我们可以复用为一个方法：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; <span class="type">double</span> <span class="title function_">add</span><span class="params">(T a, T b)</span> &#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a.doubleValue() + b.doubleValue()));</span><br><span class="line">    <span class="keyword">return</span> a.doubleValue() + b.doubleValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;xxString&quot;</span>);</span><br><span class="line">list.add(<span class="number">100d</span>);</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>());</span><br></pre></td></tr></table></figure><p>我们在使用上述list中，list中的元素都是Object类型（无法约束其中的类型），所以在取出集合元素时需要人为的强制类型转化到具体的目标类型，且很容易出现<code>java.lang.ClassCastException</code>异常。</p><p>引入泛型，它将提供类型的约束，提供编译前的检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// list中只能放String, 不能放其它类型的元素</span></span><br></pre></td></tr></table></figure><h4 id="泛型类如何定义使用？">泛型类如何定义使用？</h4><ul><li>从一个简单的泛型类看起：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&lt;T&gt;&#123;         <span class="comment">// 此处可以随便写标识符号，T是type的简称  </span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;     <span class="comment">// var的类型由T指定，即：由外部指定  </span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;  <span class="comment">// 返回值的类型由外部决定  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;  <span class="comment">// 设置的类型也由外部决定  </span></span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo06</span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;  </span><br><span class="line">        Point&lt;String&gt; p = <span class="keyword">new</span> <span class="title class_">Point</span>&lt;String&gt;() ;     <span class="comment">// 里面的var类型为String类型  </span></span><br><span class="line">        p.setVar(<span class="string">&quot;it&quot;</span>) ;                            <span class="comment">// 设置字符串  </span></span><br><span class="line">        System.out.println(p.getVar().length()) ;   <span class="comment">// 取得字符串的长度  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多元泛型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&lt;K,V&gt;&#123;       <span class="comment">// 此处指定了两个泛型类型  </span></span><br><span class="line">    <span class="keyword">private</span> K key ;     <span class="comment">// 此变量的类型由外部决定  </span></span><br><span class="line">    <span class="keyword">private</span> V value ;   <span class="comment">// 此变量的类型由外部决定  </span></span><br><span class="line">    <span class="keyword">public</span> K <span class="title function_">getKey</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.key ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">getValue</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(K key)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.key = key ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(V value)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.value = value ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo09</span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;  </span><br><span class="line">        User&lt;String,Integer&gt; t = <span class="literal">null</span> ;        <span class="comment">// 定义两个泛型类型的对象  </span></span><br><span class="line">        t = <span class="keyword">new</span> <span class="title class_">User</span>&lt;String,Integer&gt;() ;       <span class="comment">// 里面的key为String，value为Integer  </span></span><br><span class="line">        t.setKey(<span class="string">&quot;汤姆&quot;</span>) ;        <span class="comment">// 设置第一个内容  </span></span><br><span class="line">        t.setValue(<span class="number">20</span>) ;            <span class="comment">// 设置第二个内容  </span></span><br><span class="line">        System.out.print(<span class="string">&quot;姓名；&quot;</span> + t.getKey()) ;      <span class="comment">// 取得信息  </span></span><br><span class="line">        System.out.print(<span class="string">&quot;，年龄；&quot;</span> + t.getValue()) ;       <span class="comment">// 取得信息  </span></span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="泛型接口如何定义使用？">泛型接口如何定义使用？</h4><ul><li>简单的泛型接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&lt;T&gt;&#123;        <span class="comment">// 在接口上定义泛型  </span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span> ; <span class="comment">// 定义抽象方法，抽象方法的返回值就是泛型类型  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Info</span>&lt;T&gt;&#123;   <span class="comment">// 定义泛型接口的子类  </span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;             <span class="comment">// 定义属性  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InfoImpl</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;     <span class="comment">// 通过构造方法设置属性内容  </span></span><br><span class="line">        <span class="built_in">this</span>.setVar(<span class="keyword">var</span>) ;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo24</span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arsg[])</span>&#123;  </span><br><span class="line">        Info&lt;String&gt; i = <span class="literal">null</span>;        <span class="comment">// 声明接口对象  </span></span><br><span class="line">        i = <span class="keyword">new</span> <span class="title class_">InfoImpl</span>&lt;String&gt;(<span class="string">&quot;汤姆&quot;</span>) ;  <span class="comment">// 通过子类实例化对象  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;内容：&quot;</span> + i.getVar()) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h4 id="泛型方法如何定义使用？">泛型方法如何定义使用？</h4><ul><li>定义泛型方法语法格式</li></ul><p><a href="https://imgse.com/i/pkfC3p6"><img src="https://s21.ax1x.com/2024/07/08/pkfC3p6.png" alt="pkfC3p6.png"></a></p><ul><li>调用泛型方法语法格式</li></ul><p><a href="https://imgse.com/i/pkfCG6O"><img src="https://s21.ax1x.com/2024/07/08/pkfCG6O.png" alt="pkfCG6O.png"></a></p><p>说明一下，定义泛型方法时，必须在返回值前边加一个<code>&lt;T&gt;</code>，来声明这是一个泛型方法，持有一个泛型<code>T</code>，然后才可以用泛型T作为方法的返回值。</p><p><code>Class&lt;T&gt;</code>的作用就是指明泛型的具体类型，而<code>Class&lt;T&gt;</code>类型的变量c，可以用来创建泛型类的对象。</p><p>为什么要用变量c来创建对象呢？既然是泛型方法，就代表着我们不知道具体的类型是什么，也不知道构造方法如何，因此没有办法去new一个对象，但可以利用变量c的newInstance方法去创建对象，也就是利用反射创建对象。</p><p>泛型方法要求的参数是<code>Class&lt;T&gt;</code>类型，而<code>Class.forName()</code>方法的返回值也是<code>Class&lt;T&gt;</code>，因此可以用<code>Class.forName()</code>作为参数。其中，<code>forName()</code>方法中的参数是何种类型，返回的<code>Class&lt;T&gt;</code>就是何种类型。在本例中，<code>forName()</code>方法中传入的是User类的完整路径，因此返回的是<code>Class&lt;User&gt;</code>类型的对象，因此调用泛型方法时，变量c的类型就是<code>Class&lt;User&gt;</code>，因此泛型方法中的泛型T就被指明为User，因此变量obj的类型为User。</p><p>当然，泛型方法不是仅仅可以有一个参数<code>Class&lt;T&gt;</code>，可以根据需要添加其他参数。</p><p><strong>为什么要使用泛型方法呢</strong>？因为泛型类要在实例化的时候就指明类型，如果想换一种类型，不得不重新new一次，可能不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。</p><h4 id="泛型的上限和下限？">泛型的上限和下限？</h4><p>在使用泛型的时候，我们可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Info</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt;&#123;    <span class="comment">// 此处泛型只能是数字类型</span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;        <span class="comment">// 定义泛型变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;    <span class="comment">// 直接打印</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span>.toString() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        Info&lt;Integer&gt; i1 = <span class="keyword">new</span> <span class="title class_">Info</span>&lt;Integer&gt;() ;        <span class="comment">// 声明Integer的泛型对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">lass Info&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;        <span class="comment">// 定义泛型变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;    <span class="comment">// 直接打印</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span>.toString() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo21</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        Info&lt;String&gt; i1 = <span class="keyword">new</span> <span class="title class_">Info</span>&lt;String&gt;() ;        <span class="comment">// 声明String的泛型对象</span></span><br><span class="line">        Info&lt;Object&gt; i2 = <span class="keyword">new</span> <span class="title class_">Info</span>&lt;Object&gt;() ;        <span class="comment">// 声明Object的泛型对象</span></span><br><span class="line">        i1.setVar(<span class="string">&quot;hello&quot;</span>) ;</span><br><span class="line">        i2.setVar(<span class="keyword">new</span> <span class="title class_">Object</span>()) ;</span><br><span class="line">        fun(i1) ;</span><br><span class="line">        fun(i2) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Info&lt;? <span class="built_in">super</span> String&gt; temp)</span>&#123;    <span class="comment">// 只能接收String或Object类型的泛型，String类的父类只有Object类</span></span><br><span class="line">        System.out.print(temp + <span class="string">&quot;, &quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="如何理解Java中的泛型是伪泛型？">如何理解Java中的泛型是伪泛型？</h4><p>泛型中类型擦除 Java泛型这个特性是从JDK 1.5才开始加入的，因此<strong>为了兼容之前的版本</strong>，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的<strong>泛型表示（尖括号中的内容）都替换为具体的类型</strong>（其对应的原生态类型），就像完全没有泛型一样。</p><h3 id="1-3-注解">1.3 注解</h3><h4 id="注解的作用？">注解的作用？</h4><p>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它主要的作用有以下四方面：</p><ul><li>生成文档，通过代码里标识的元数据生成javadoc文档。</li><li>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</li><li>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</li><li>运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。</li></ul><h4 id="注解的常见分类？">注解的常见分类？</h4><ul><li><strong>Java自带的标准注解</strong>，包括<code>@Override</code>、<code>@Deprecated</code>和<code>@SuppressWarnings</code>，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。</li><li><strong>元注解</strong>，元注解是用于定义注解的注解，包括<code>@Retention</code>、<code>@Target</code>、<code>@Inherited</code>、<code>@Documented</code><ul><li><code>@Retention</code>用于标明注解被保留的阶段</li><li><code>@Target</code>用于标明注解使用的范围</li><li><code>@Inherited</code>用于标明注解可继承</li><li><code>@Documented</code>用于标明是否生成javadoc文档</li></ul></li><li><strong>自定义注解</strong>，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解。</li></ul><h3 id="1-4-异常">1.4 异常</h3><h4 id="Java异常类层次结构">Java异常类层次结构?</h4><ul><li><strong>Throwable</strong> 是 Java 语言中所有错误与异常的超类。<ul><li><strong>Error</strong> 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。</li><li><strong>Exception</strong> 程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：<strong>运行时异常</strong>和<strong>编译时异常</strong>。</li></ul></li></ul><p><a href="https://imgse.com/i/pkfCtne"><img src="https://s21.ax1x.com/2024/07/08/pkfCtne.png" alt="pkfCtne.png"></a></p><ul><li><strong>运行时异常</strong></li></ul><p>都是<strong>RuntimeException类及其子类异常</strong>，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由<strong>程序逻辑错误引起</strong>的，程序应该从逻辑角度尽可能避免这类异常的发生。</p><p>运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。</p><ul><li><strong>非运行时异常</strong> （编译异常）</li></ul><p>是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲<strong>是必须进行处理的异常</strong>，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</p><h4 id="可查的异常（checked-exceptions）和不可查的异常（unchecked-exceptions）区别？">可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）区别？</h4><ul><li><strong>可查异常</strong>（编译器要求必须处置的异常）：</li></ul><p>正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是<strong>可以预计</strong>的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。</p><p>除了RuntimeException及其子类以外，<strong>其他的Exception类及其子类都属于可查异常</strong>。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么<strong>用try-catch语句捕获</strong>它，要么用throws子句声明抛出它，否则编译不会通过。</p><ul><li><strong>不可查异常</strong>(编译器不要求强制处置的异常)</li></ul><p>包括运行时异常（RuntimeException与其子类）和错误（Error）。</p><h4 id="throw和throws的区别？">throw和throws的区别？</h4><ul><li><strong>异常的申明(throws)</strong></li></ul><p>在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException, FileNotFoundException&#123;</span><br><span class="line">    <span class="comment">//something statements</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>异常的抛出(throw)</strong></li></ul><p>如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(value == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>(<span class="string">&quot;参数不能为0&quot;</span>); <span class="comment">//抛出一个运行时异常</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5.0</span> / value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java-7-的-try-with-resource">Java 7 的 try-with-resource?</h4><p>如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">automaticallyCloseResource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./tmp.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);) &#123;</span><br><span class="line">        <span class="comment">// use the inputStream to read a file</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        log.error(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常的底层？">异常的底层？</h4><p>提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleTryCatch</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       testNPE();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用javap来分析这段代码（需要先使用javac编译）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//javap -c Main</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">simpleTryCatch</span><span class="params">()</span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: invokestatic  #<span class="number">3</span>                  <span class="comment">// Method testNPE:()V</span></span><br><span class="line">       <span class="number">3</span>: goto          <span class="number">11</span></span><br><span class="line">       <span class="number">6</span>: astore_0</span><br><span class="line">       <span class="number">7</span>: aload_0</span><br><span class="line">       <span class="number">8</span>: invokevirtual #<span class="number">5</span>                  <span class="comment">// Method java/lang/Exception.printStackTrace:()V</span></span><br><span class="line">      <span class="number">11</span>: <span class="keyword">return</span></span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           <span class="number">0</span>     <span class="number">3</span>     <span class="number">6</span>   Class java/lang/Exception</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下</p><ul><li><strong>from</strong> 可能发生异常的起始点</li><li><strong>to</strong>能发生异常的结束点</li><li><strong>target</strong> 上述from和to之前发生异常后的异常处理者的位置</li><li><strong>type</strong> 异常处理者处理的异常的类信息</li></ul><h3 id="1-5-反射">1.5 反射</h3><h4 id="什么是反射？">什么是反射？</h4><p>JAVA反射机制是在<strong>运行状态</strong>中，对于任意一个类，都能够<strong>知道这个类的所有属性和方法</strong>；对于任意一个对象，<strong>都能够调用它的任意一个方法和属性</strong>；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><p><a href="https://imgse.com/i/pkfCN0H"><img src="https://s21.ax1x.com/2024/07/08/pkfCN0H.md.png" alt="pkfCN0H.md.png"></a></p><h4 id="反射的使用？">反射的使用？</h4><p>在Java中，Class类与java.lang.reflect类库一起对反射技术进行了全力的支持。在反射包中，我们常用的类主要有Constructor类表示的是Class 对象所表示的类的构造方法，利用它可以在运行时动态创建对象、Field表示Class对象所表示的类的成员变量，通过它可以在运行时动态修改成员变量的属性值(包含private)、Method表示Class对象所表示的类的成员方法，通过它可以动态调用对象的方法(包含private)</p><ul><li>Class类对象的获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">classTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取Class对象的三种方式</span></span><br><span class="line">        logger.info(<span class="string">&quot;根据类名:  \t&quot;</span> + User.class);</span><br><span class="line">        logger.info(<span class="string">&quot;根据对象:  \t&quot;</span> + <span class="keyword">new</span> <span class="title class_">User</span>().getClass());</span><br><span class="line">        logger.info(<span class="string">&quot;根据全限定类名:\t&quot;</span> + Class.forName(<span class="string">&quot;com.test.User&quot;</span>));</span><br><span class="line">        <span class="comment">// 常用的方法</span></span><br><span class="line">        logger.info(<span class="string">&quot;获取全限定类名:\t&quot;</span> + userClass.getName());</span><br><span class="line">        logger.info(<span class="string">&quot;获取类名:\t&quot;</span> + userClass.getSimpleName());</span><br><span class="line">        logger.info(<span class="string">&quot;实例化:\t&quot;</span> + userClass.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Constructor类及其用法</li><li>Field类及其用法</li><li>Method类及其用法</li></ul><h4 id="getName、getCanonicalName与getSimpleName的区别">getName、getCanonicalName与getSimpleName的区别?</h4><ul><li>getSimpleName：只获取类名</li><li>getName：类的全限定名，jvm中Class的表示，可以用于动态加载Class对象，例如Class.forName。</li><li>getCanonicalName：返回更容易理解的表示，主要用于输出（toString）或log打印，大多数情况下和getName一样，但是在内部类、数组等类型的表示形式就不同了。</li></ul><h3 id="1-6-SPI机制">1.6 SPI机制</h3><h4 id="什么是SPI机制？">什么是SPI机制？</h4><p>SPI（Service Provider Interface），是JDK内置的一种 <strong>服务提供发现机制</strong>，可以用来<strong>启用框架扩展和替换组件</strong>，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。Java中SPI机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是 <strong>解耦</strong>。</p><p><a href="https://imgse.com/i/pkfCU7d"><img src="https://s21.ax1x.com/2024/07/08/pkfCU7d.md.png" alt="pkfCU7d.md.png"></a></p><p>当服务的提供者提供了一种接口的实现之后，需要在classpath下的<code>META-INF/services/</code>目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个jar包（一般都是以jar包做依赖）的<code>META-INF/services/</code>中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK中查找服务的实现的工具类是：<code>java.util.ServiceLoader</code>。</p><h4 id="SPI机制的应用？">SPI机制的应用？</h4><ul><li>SPI机制 - JDBC DriverManager</li></ul><p>在JDBC4.0之前，我们开发有连接数据库的时候，通常会用Class.forName(“com.mysql.jdbc.Driver”)这句先加载数据库相关的驱动，然后再进行获取连接等的操作。<strong>而JDBC4.0之后不需要用Class.forName(“com.mysql.jdbc.Driver”)来加载驱动，直接获取连接就可以了，现在这种方式就是使用了Java的SPI扩展机制来实现</strong>。</p><ul><li><p>JDBC接口定义</p><p>首先在java中定义了接口<code>java.sql.Driver</code>，并没有具体的实现，具体的实现都是由不同厂商来提供的。</p></li><li><p>mysql实现</p></li></ul><p>在mysql的jar包<code>mysql-connector-java-6.0.6.jar</code>中，可以找到<code>META-INF/services</code>目录，该目录下会有一个名字为<code>java.sql.Driver</code>的文件，文件内容是<code>com.mysql.cj.jdbc.Driver</code>，这里面的内容就是针对Java中定义的接口的实现。</p><ul><li>postgresql实现</li></ul><p>同样在postgresql的jar包<code>postgresql-42.0.0.jar</code>中，也可以找到同样的配置文件，文件内容是<code>org.postgresql.Driver</code>，这是postgresql对Java的<code>java.sql.Driver</code>的实现。</p><ul><li>使用方法</li></ul><p>上面说了，现在使用SPI扩展来加载具体的驱动，我们在Java中写连接数据库的代码的时候，不需要再使用<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>来加载驱动了，而是直接使用如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:xxxx://xxxx:xxxx/xxxx&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password);</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h4 id="SPI机制的简单示例？">SPI机制的简单示例？</h4><p>我们现在需要使用一个内容搜索接口，搜索的实现可能是基于文件系统的搜索，也可能是基于数据库的搜索。</p><ul><li>先定义好接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Search</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">searchDoc</span><span class="params">(String keyword)</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文件搜索实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileSearch</span> <span class="keyword">implements</span> <span class="title class_">Search</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">searchDoc</span><span class="params">(String keyword)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件搜索 &quot;</span>+keyword);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据库搜索实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseSearch</span> <span class="keyword">implements</span> <span class="title class_">Search</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">searchDoc</span><span class="params">(String keyword)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据搜索 &quot;</span>+keyword);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>resources 接下来可以在resources下新建META-INF/services/目录，然后新建接口全限定名的文件：<code>com.cainiao.ys.spi.learn.Search</code>，里面加上我们需要用到的实现类</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.cainiao.ys.spi.learn.FileSearch</span><br></pre></td></tr></table></figure><ul><li>测试方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCase</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ServiceLoader&lt;Search&gt; s = ServiceLoader.load(Search.class);</span><br><span class="line">        Iterator&lt;Search&gt; iterator = s.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">           <span class="type">Search</span> <span class="variable">search</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">           search.searchDoc(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到输出结果：文件搜索 hello world</p><p>如果在<code>com.cainiao.ys.spi.learn.Search</code>文件里写上两个实现类，那最后的输出结果就是两行了。</p><p>这就是因为<code>ServiceLoader.load(Search.class)</code>在加载某接口时，会去<code>META-INF/services</code>下找接口的全限定名文件，再根据里面的内容加载相应的实现类。</p><p>这就是spi的思想，接口的实现由provider实现，provider只用在提交的jar包里的<code>META-INF/services</code>下根据平台定义的接口新建文件，并添加进相应的实现类内容就好。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 知识点总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用的指令</title>
      <link href="/posts/982fc2c9.html"/>
      <url>/posts/982fc2c9.html</url>
      
        <content type="html"><![CDATA[<h1>hexo常用命令</h1><p>我一般来说就经常用的就是</p><ul><li>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo s</li><li>hexo d 部署上线</li></ul><h2 id="1-文章的书写">1. 文章的书写</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure><p>eg: <code>hexo new &quot;post title with whitespace&quot;</code> 其中 layout为_config.yml中的默认参数值。</p><ul><li><code>-p --path</code> 自定义新文章</li><li><code>-r --replace</code> 存在同名文章，替换</li><li><code>-s --slug</code> 文章的slug，作为新文章的文件名和发布后的URL</li></ul><h2 id="2-生成静态文件">2. 生成静态文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span>` 或 `hexo g</span><br></pre></td></tr></table></figure><ul><li><code>-d 或--deploy</code> 文件生成后部署网站</li><li><code>-w 或--watch</code> 监视文件变动</li><li><code>-b 或--bail</code> 生成过程中出现异常则抛出。</li><li><code>-f 或--force</code> 强制重新生成文件</li><li><code>-c 或--concurrency</code> 最大同时生成文件数量，默认无限制。</li></ul><h2 id="3-发布草稿">3. 发布草稿</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-启动服务器">4.启动服务器</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server<span class="string">` 启动服务器，ctrl+c 结束，默认地址为：`</span>http:<span class="comment">//localhost:4000/</span></span><br></pre></td></tr></table></figure><h2 id="5-部署网站">5.部署网站</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy` 或`hexo d</span><br></pre></td></tr></table></figure><ul><li><code>-g 或--generate</code> 部署之前写成静态文件</li></ul><h2 id="6-渲染文件">6.渲染文件</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> render &lt;file1&gt;<span class="meta"> [file2]</span></span><br></pre></td></tr></table></figure><ul><li><code>-o或--output</code> 设置输出路径</li></ul><h2 id="7-清除缓存文件">7. 清除缓存文件</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br></pre></td></tr></table></figure><h2 id="8-列出网站资料">8. 列出网站资料</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> list &lt;<span class="keyword">type</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="9-显示草稿">9. 显示草稿</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="comment">--deaft</span></span><br></pre></td></tr></table></figure><h2 id="10-自定义当前工作目录">10. 自定义当前工作目录</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="attr">--cwd</span> /path/<span class="selector-tag">to</span>/cwd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试整理</title>
      <link href="/posts/acf92a4b.html"/>
      <url>/posts/acf92a4b.html</url>
      
        <content type="html"><![CDATA[<h1>java面试题-编程导航</h1><h2 id="java基础">java基础</h2><h3 id="1、JDK-和-JRE-和-JVM-分别是什么，有什么区别？">1、JDK 和 JRE 和 JVM 分别是什么，有什么区别？</h3><p>[<img src="https://s21.ax1x.com/2024/07/05/pkRrD39.png" alt="pkRrD39.png"></p><ol><li>JDK（Java Development Kit）：<strong>JDK 是 Java 开发⼯具包</strong>，包含了编写、编译、调试和运行 Java 程序所需的 所有⼯具和组件，比如编译器（javac）、Java API、调试⼯具等。JDK 是针对 Java 开发⼈员的，<strong>它包含了  JRE，还有编译器和其他⼯具</strong>，可以用来编写和调试 Java 程序。</li><li>JRE（Java Runtime Environment）：<strong>JRE 是 Java 运行时环境</strong>，包括了 <strong>Java 虚拟机（JVM）和 Java 标准类 库（Java API</strong>）。JRE 是针对 Java 应用程序的，它提供了在计算机上运行 Java 应用程序所需的最小环境。</li><li>JVM（Java Virtual Machine）<strong>：JVM 是 Java 虚拟机，是 Java 程序运行的环境</strong>。JVM 负责将 Java 代码解释或 编译为本地机器代码，并在运行时提供必要的环境⽀持，比如内存管理、垃圾回收、安全性等。JVM 的主要 作用是<strong>将 Java 代码转换为可以在计算机上运行的机器码</strong>，并负责程序的执行。</li></ol><ul><li>综上所述，JDK、JRE 和 JVM 之间的区别可以总结如下：<ol><li><strong>JDK 是 Java 开发⼯具包</strong>，包括了编译器、Java API、调试⼯具等，用于开发 Java 应用程序。</li><li>J<strong>RE 是 Java 运行时环境，包括了 Java 虚拟机和 Java 标准类库</strong>，用于在计算机上运行 Java 应用程序。</li><li><strong>JVM 是 Java 虚拟机，是 Java 程序运行的环境，负责将 Java 代码转换为可以在计算机上运行的机器码</strong>，并提 供必要的环境⽀持</li></ol></li></ul><h3 id="2、什么是字节码？采用字节码的最大好处是什么？">2、什么是字节码？采用字节码的最大好处是什么？</h3><ul><li><p>字节码是 <strong>Java 程序编译后的中间代码</strong>，是⼀种<strong>可移植的⼆进制代码</strong>，可以在任何⽀持 Java 虚拟机（JVM）的平台 上运行。字节码通过将 Java 源代码编译为字节码指令序列，<strong>使得 Java 程序可以跨平台运行</strong>，即使是在不同的操作 系统和硬件平台上也可以运行。</p></li><li><p>字节码采用中间代码的形式，相比于直接将程序编译为特定平台上的机器码，有以下几个好处：</p></li><li><p><strong>可移植性</strong>：由于字节码是中间代码，所以<strong>可以在任何⽀持 JVM 的平台上运行</strong>，使得 Java 程序具有很好的可移植性。这也是 Java 跨平台的重要特性之⼀。</p></li><li><p><strong>安全性</strong>：由于字节码<strong>需要在 JVM 中运行</strong>，所以可以对字节码进行安全检查，以确保程序不会对系统造成威胁。</p></li><li><p><strong>性能</strong>：由于字节码是⼀种<strong>紧凑的⼆进制格式</strong>，相比于直接编译为机器码，可以更快地加载和传输，同时也可以在运行时进行动态优化，<strong>提高程序的执行效率</strong>。</p></li><li><p><strong>可读性</strong>：相比于直接编译为机器码，<strong>字节码具有更好的可读性</strong>，可以方便地进行反汇编和调试</p><p>因此，采用字节码作为中间代码的最大好处是提高了 Java 程序的可移植性、安全性、性能和可读性。这也是 Java  跨平台和安全性等特性的基础。</p></li></ul><h3 id="3、Java-和-C-、Go-语言的区别，各自的优缺点？">3、Java 和 C++、Go 语言的区别，各自的优缺点？</h3><p>java</p><ul><li><strong>优点:</strong><ul><li>简单易学代码可读性强</li><li>跨平台⼀次编写可以在多个操作系统上运行</li><li>面向对象⽀持继承、多态等特性 丰富的类库</li><li>可以快速开发应用程序</li><li>自动内存管理，减少了内存泄漏的可能性</li></ul></li><li><strong>缺点</strong>:<ul><li>由于JVM的存在，运行速度相对较慢</li><li>对于实时性要求较高的场景，Java的表现可能不如C++和Go</li></ul></li></ul><p>C++</p><ul><li><strong>优点</strong>:<ul><li>速度快，适合编写需要高性能的应用程序</li><li>应用广泛，特别是在游戏开发、操作系统和嵌⼊式系统开发方面</li><li>灵活性高，可以直接访问硬件和内存</li></ul></li><li><strong>缺点</strong><ul><li>学习难度较高，需要掌握指针、内存管理等底层知识</li><li>容易出现内存泄漏和指针错误等问题</li><li>编写代码过程中需要更多的⼿动管理，相比 Java 更容易出错</li></ul></li></ul><p>go</p><ul><li><strong>优点</strong>:<ul><li>高并发，天生⽀持协程，能够轻松编写高效的并发程序</li><li>简单易学，语法简洁，上⼿容易</li><li>静态类型语言，可以避免⼀些潜在的运行时错误</li><li>快速编译，可以快速构建和部署应用程序</li></ul></li><li><strong>缺点</strong>:<ul><li>缺乏丰富的类库，与 Java 和 C++ 相比有些不足</li><li>在⼀些性能要求极高的场景中可能不如 C++ 表现</li><li>语言本身还比较年轻，相关生态和⼯具还需要进⼀步完善</li></ul></li></ul><p>使用场景:</p><p>JAVA</p><ul><li>适合开发<strong>企业级应用程序</strong>、后端服务等</li></ul><p>C++</p><ul><li>适合开发需要<strong>高性能和高可靠性</strong>的应用程序，特别是在游戏开发、操作系统和嵌⼊式系统开发方面。</li></ul><p>GO</p><ul><li>适合开发<strong>高并发的后端服务</strong>、微服务、容器化应用程序等</li></ul><h3 id="4、JDK-动态代理和-CGLIB-动态代理的区别是什么？">4、JDK 动态代理和 CGLIB 动态代理的区别是什么？</h3><p>JDK和CGLib动态代理区别</p><ol><li>JDK动态代理具体实现原理</li></ol><ul><li>通过实现 <strong>InvocationHandler</strong> 接⼝创建自⼰的<strong>调用处理器</strong>；</li><li>通过为 Proxy 类指定 ClassLoader 对象和⼀组 interface 来创建动态代理；</li><li>通过反射机制获取<strong>动态代理类的构造函数</strong>，其唯⼀参数类型就是调用处理器接⼝类型；</li><li>通过<strong>构造函数创建动态代理类实例</strong>，构造时调用处理器对象作为参数参⼊；</li></ul><p>JDK 动态代理是<strong>面向接口的代理模式</strong>，如果被代理目标没有接⼝那么 Spring 也⽆能为⼒，Spring 通过 Java 的反射 机制生产被代理接⼝的新的匿名实现类，重写了其中 AOP 的增强方法。</p><ol start="2"><li>CGLib动态代理</li></ol><p>利用 ASM 开源包，对代理对象类的 class 文件加载进来，通过修改其字节码生成⼦类来处理。</p><ol start="3"><li>两者对比：</li></ol><p>JDK 动态代理是面向接口的。 CGLib 动态代理是通过字节码底层继承要代理类来实现，因此如果被代理类被 final 关键字所修饰，会失败。 如果要被代理的对象是个实现类，那么 Spring 会使用 JDK 动态代理来完成操作（Spirng 默认采用 JDK 动态代理实 现机制）； 如果要被代理的对象不是个实现类，那么 Spring 会强制使用 CGLib 来实现动态代理。</p><h3 id="5、Java-中-final-关键字有什么用">5、Java 中 final 关键字有什么用</h3><p>在 Java 中，final 关键字用于表示⼀个不可变的常量或⼀个不可变的变量。</p><p>在 Java 中，final 关键字可以修饰类、方法和变量，作用如下：</p><ul><li>final 修饰类，表示该类不能被继承。final 类中的方法默认都是 final 的，不能被子类重写。</li><li>final 修饰方法，表示该方法不能被子类重写。</li><li>final 修饰变量，表示该变量只能被赋值⼀次。final 修饰的变量必须在声明时或构造函数中初始化，且不能再 被修改。常用于定义常量</li></ul><p>另外，使用 final 修饰的变量在编译时就已经确定了其值，因此在运行时访问时比非 final 变量更快。</p><p>使用 final 关键字可以带来⼀些好处，例如：</p><ul><li>安全性：将变量声明为 final 可以防⽌它被改变，从而提高安全性。</li><li>可读性：将常量声明为 final 可以提高代码的可读性，因为常量的值不会被修改。</li><li>优化：final 变量在编译时被转换成常量，这可以提高程序的性能。</li></ul><h3 id="6、Java-中-hashCode-和-equals-方法是什么？它们和-各有什么区别？">6、Java 中 hashCode 和 equals 方法是什么？它们和 == 各有什么区别？</h3><p>[<img src="https://s21.ax1x.com/2024/07/05/pkRrcB6.png" alt="pkRrcB6.png"></p><h3 id="7、什么是反射机制？说说反射机制的优缺点、应用场景">7、什么是反射机制？说说反射机制的优缺点、应用场景?</h3><p>Java的反射机制是指在运行时获得类的信息，创建类的对象，调用其中的方法和属性。</p><p>优点</p><ul><li>可以动态的获取类信息。</li><li>可以动态的创建类对象。</li><li>可以动态的调用类对象的方法以及属性。</li></ul><p>缺点:</p><ul><li>不安全，反射能够获取所有类对象，包括私有的，破坏了程序的封装性。</li><li>效率低，反射的效率较低。</li></ul><p>应用场景:</p><ul><li>动态代理，因为不确定需要代理的类，所以需要通过反射动态的获取</li><li>RPC 框架，RPC 框架就是动态的生成类对象，然后调用方法的。</li></ul><h3 id="8、Java-访问修饰符-public、private、protected，以及无修饰符（默-认）的区别？">8、Java 访问修饰符 public、private、protected，以及无修饰符（默 认）的区别？</h3><p>[<img src="https://s21.ax1x.com/2024/07/05/pkRrgHK.png" alt="pkRrgHK.png"></p><h3 id="9、String-和-StringBuffer、StringBuilder-的区别是什么？">9、String 和 StringBuffer、StringBuilder 的区别是什么？</h3><ul><li>String 和 StringBuffer/StringBuilder 是 Java 中两种不同的字符串处理方式，主要的区别在于 String 是<strong>不可变的 对象</strong>，而 StringBuffer 和 StringBuilder 则是<strong>可变的对象。</strong></li><li>String 对象<strong>⼀旦被创建，就不可修改</strong>，任何的字符串操作都会返回⼀个新的 String 对象，这可能导致<strong>频繁的对象创建和销毁影响性能</strong>。而 StringBuffer 和 StringBuilder 允许进行修改操作，提供了⼀种<strong>更高效</strong>的字符串处理方式。</li><li>StringBuffer 和 StringBuilder 的主要区别在于<strong>线程安全性和性能方面</strong>。StringBuffer 是<strong>线程安全的</strong>，所有方法都是同步的，因此可以被多个线程同时访问和修改。而 StringBuilder <strong>不是线程安全</strong>的，适用于单线程环境下的字符串处理，但是相比于 StringBuffer，<strong>StringBuilder 具有更高的性能</strong>。</li><li>因此，当字符串处理需要<strong>频繁修改</strong>时，建议使用 StringBuffer 或 StringBuilder；而当字符串处理<strong>不需要修改</strong>时， 可以使用 String。</li></ul><p><img src="https://s21.ax1x.com/2024/07/05/pkRrsj1.png" alt="pkRrsj1.png"></p><h3 id="10、什么是-Java-内部类？内部类的分类有哪些-？内部类有哪些优点和应用场景？">10、什么是 Java 内部类？内部类的分类有哪些 ？内部类有哪些优点和应用场景？</h3><p><img src="https://s21.ax1x.com/2024/07/05/pkRr49H.png" alt="pkRr49H.png"></p><p><strong>创建与获取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="number">1</span>、私有内部类 =&gt; 在外部类中编写方法，对外提供内部类对象</span><br><span class="line"><span class="comment">// 定义方法（外部类中）</span></span><br><span class="line"><span class="keyword">public</span> Inner <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 使用方法</span></span><br><span class="line"><span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line"> <span class="type">Object</span> <span class="variable">i</span> <span class="operator">=</span> o.getInstance();</span><br><span class="line"> <span class="comment">// 2. ⾮私有内部类 =&gt; 直接创建成员内部类</span></span><br><span class="line"><span class="comment">// 外部类名.内部类名 对象名 = new 外部类对象.new 内部类对象;</span></span><br><span class="line"> Outer.<span class="type">Inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>()</span><br></pre></td></tr></table></figure><p>优点</p><ul><li>可以隐藏实现细节。</li><li>便于编写和维护，提高代码的可读性和可维护性。</li><li>使用内部类解决 Java单继承问题</li><li>可以更换的对外部类进行扩展</li><li>注：JDK16 之前成员内部类⾥不能定义静态变量</li></ul><h2 id="MySql数据库">MySql数据库</h2><h3 id="1、什么是数据库事务？讲⼀下事务的-ACID-特性？">1、什么是数据库事务？讲⼀下事务的 ACID 特性？</h3><p>数据库事务是指数据库管理系统（DBMS）中的⼀个操作序列，这些操作必须作为⼀个不可分割的单元执行，即要 么全部执行成功，要么全部失败回滚。事务通常涉及到对数据库中的数据进行读写操作。 事务的 ACID 特性指四个关键特征：<strong>原子性</strong>（Atomicity）、<strong>⼀致性</strong>（Consistency）、<strong>隔离性</strong>（Isolation）和<strong>持久 性</strong>（Durability）</p><ul><li><p><strong>原子性</strong></p><p>原子性是指事务是⼀个<strong>不可再分割的⼯作单元</strong>，事务中的操作要么都发生，要么都不发生。可采用“A向B转账”这个 例⼦来说明解释。 在 DBMS 中，默认情况下<strong>⼀条 SQL 就是⼀个单独事务</strong>，事务是自动提交的。只有显式的使用 start transaction 开启⼀个事务，才能将⼀个代码块放在事务中执行。</p></li><li><p><strong>一致性</strong></p><p>⼀致性是指在<strong>事务开始之前和事务结束以后，数据库的完整性约束没有被破坏</strong>。这是说数据库事务不<strong>能破坏关系数据的完整性以及业务逻辑上的⼀致性</strong>。 如 A 给 B 转账，不论转账的事务操作是否成功，其两者的存款总额不变（这是业务逻辑的⼀致性，⾄于数据库关 系约束的完整性就更好理解了）。</p></li><li><p><strong>隔离性</strong></p><p><strong>多个事务并发访问时，事务之间是隔离的</strong>，⼀个事务不应该影响其它事务运行效果。</p><p>在并发环境中，当<strong>不同的事务同时操纵相同的数据时</strong>，每个事务都有<strong>各自的完整数据空间</strong>。由并发事务所做的修改<strong>必须与任何其他并发事务所做的修改隔离</strong>。事务查看数据更新时，数据所处的状态要么是另⼀事务修改它之前的状 态，要么是另⼀事务修改它之后的状态，事务<strong>不会查看到中间状态的数据</strong>。</p><p>事务最复杂问题都是由事务隔离性引起的。完全的隔离性是不现实的，完全的隔离性要求数据库同⼀时间只执行⼀ 条事务，这样会严重影响性能。</p><p><strong>有四种隔离级别：</strong></p><ul><li><p>第⼀种隔离级别**：Read uncommitted(读未提交)**</p><p>解决了更新丢失，但还是可能会出现脏读</p></li><li><p>第⼆种隔离级别：<strong>Read committed(读提交)</strong></p><p>解决了更新丢失和脏读问题</p></li><li><p>第三种隔离级别：<strong>Repeatable read(可重复读取)</strong></p><p>解决了更新丢失、脏读、不可重复读、但是还会出现幻读</p></li><li><p>第四种隔离级别：<strong>Serializable(可序化)</strong></p><p>解决了更新丢失、脏读、不可重复读、幻读(虚读)</p></li></ul></li><li><p><strong>持久性</strong></p><p>这是最好理解的⼀个特性：持久性，意味着在事务完成以后，该事务所对数据库<strong>所作的更改便持久的保存在数据库之中</strong>，并不会被回滚。（完成的事务是系统永久的部分，对系统的影响是永久性的，该修改即使出现致命的系统故 障也将⼀直保持）</p></li></ul><h3 id="2、MySQL-日志有了解过吗？binlog、redolog、undolog-分别有什么作-用、有什么区别？">2、MySQL 日志有了解过吗？binlog、redolog、undolog 分别有什么作 用、有什么区别？</h3><p>MySQL 是⼀款流行的关系型数据库，其日志是其关键功能之⼀。MySQL 包括三种类型的日志，分别是 binlog、 redolog 和 undolog，它们分别有不同的作用和特点。</p><ul><li><p><strong>binlog</strong></p><p>是 MySQL 中的⼆进制日志文件，用于记录 MySQL 服务器上的所有<strong>更新和修改操作</strong>。它可以记录所有的 <strong>DDL和 DML</strong>操作，包括对表结构的更改、数据的插⼊、修改、删除等等。<strong>binlog是在事务提交后生成的</strong>，因此可以用于恢复 数据库。</p></li><li><p><strong>redolog</strong></p><p>用于<strong>恢复数据</strong>，保证数据的<strong>⼀致性和持久性</strong>。当 MySQL 发生修改时， redolog 会将这些操作<strong>记录下来，并写⼊磁盘</strong>。这样，当 MySQL 发生宕机或崩溃时，通过重放 redolog 就可 以恢复数据。</p></li><li><p><strong>undolog</strong></p><p>用于<strong>回滚操作</strong>。当 MySQL <strong>发生事务回滚时，undolog 会记录这些操作并将其写⼊磁盘</strong>。这样，当 MySQL 需要回滚时，通过重放 undolog 就可以回滚事务。</p></li></ul><p>区别</p><ul><li>相同点:<ul><li>binlog 和 redolog 都是 MySQL 中的<strong>⼆进制日志</strong>。</li></ul></li><li>不同点<ul><li>binlog 是 MySQL 记录所有的操作，而redolog 则是用于保证数据的⼀致性和持久性。</li><li>binlog 是逻辑日志，redolog 是物理日志。</li><li>binlog 记录的是SQL语句，而redolog 记录的是数据页的修改。</li><li>以 binlog 可以跨平台使用，而redolog 不能。</li><li>undolog 是用于回滚操作的，而redolog 是用于恢复数据的。</li></ul></li></ul><h3 id=""></h3><h3 id="3、数据库索引是什么，有什么作用，什么场景适合使用索引？">3、数据库索引是什么，有什么作用，什么场景适合使用索引？</h3><p>数据库索引是⼀种数据结构，就像书的目录⼀样，它可以帮助我们快速定位到想要的数据。<br>优点</p><ul><li>可以<strong>提高数据检索的效率</strong>，<strong>降低数据库的IO成本</strong>，类似于书的目录。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗。</li></ul><p>缺点</p><ul><li>需要占用物理空间，数量越大，占用空间越大。</li><li>索引虽然会提高查询效率，但是<strong>会降低更新表的效率</strong>。比如每次对表进行增删改操作，MySQL不仅要保存数据，还有保存或者更新对应的索引文件。</li></ul><p>什么场景适合使用索引？</p><ul><li>频繁使用的列，主键、外键。</li><li>字段有唯⼀性限制的，比如商品编码，可以使用唯⼀索引。</li><li>经常用于 WHERE 查询条件的字段，这样能够提高整个表的查询速度，如果查询条件不是⼀个字段，可以建联合索引。</li><li>经常用于 GROUP BY 和 ORDER BY 的字段，这样在查询的时候就不需要再去做⼀次排序了，因为我们都已经知道了建立索引之后在 B+Tree 中的记录都是排序好的</li></ul><p>什么时候不适合创建索引？</p><ul><li><strong>WHERE 条件</strong>，<strong>GROUP BY</strong>，<strong>ORDER BY</strong> ⾥用不到的字段，索引的价值是快速定位，如果起不到定位的字段 通常是不需要创建索引的，因为索引是会占用物理空间的。</li><li>字段中<strong>存在大量重复数据，不需要创建索引</strong>，比如性别字段，只有男女，如果数据库表中，男女的记录分布均匀，那么⽆论搜索哪个值都可能得到⼀半的数据。在这些情况下，还不如不要索引，因为 MySQL 还有⼀个查询优化器，查询优化器发现某个值出现在表的数据行中的百分比很高的时候，它⼀般会忽略索引，进行全表扫描。</li><li>表数据太少的时候，不需要创建索引。</li><li>经常更新的字段不用创建索引，比如不要对电商项目的用户余额建立索引，因为索引字段频繁修改，由于要维护B+Tree的有序性，那么就需要频繁的重建索引，这个过程是会影响数据库性能的。</li></ul><h3 id="4、你是怎么做-MySQL数据备份的？比如怎么恢复半个月前的数据？">4、你是怎么做 MySQL数据备份的？比如怎么恢复半个月前的数据？</h3><p>MySQL 数据备份有多种方法，包括<strong>逻辑备份、物理备份、全备份和增量备份</strong>。如果你想要恢复半个月前的数据，你需要先确保你有半个月前的备份文件，然后使用相应的⼯具或命令 进行还原。</p><p><strong>逻辑备份</strong></p><p>逻辑备份是使用 SQL 语句来导出和导⼊数据库的数据的方法。</p><p>优点：是简单易用，可以跨平台和存储引擎，可以部分备份和恢复。</p><p>缺点：速度慢，占用空间大，可能影响数据库性能。</p><ol><li>MySQL 提供了⼀个原生的逻辑备份⼯具叫做 mysqldump。你可以使用它来备份整个数据库实例、单个数据库或 单张表。例如，如果你想要备份⼀个叫 ytt 的数据库，你可以在命令行窗⼝输⼊：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 密码 <span class="comment">--database ytt &gt; ytt.sql</span></span><br></pre></td></tr></table></figure><ol start="2"><li>如果你想要恢复这个文件到数据库中，你可以在命令行窗⼝输⼊：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u 用户名 -<span class="selector-tag">p</span> 密码 &lt; ytt<span class="selector-class">.sql</span></span><br></pre></td></tr></table></figure><p>这样就会执行 SQL 文件中的语句，将数据还原到数据库中。</p><p><strong>物理备份</strong></p><p>物理备份是直接拷贝数据库的数据文件、配置文件和日志文件。</p><p>优点：<strong>速度快，占用空间小</strong>，不影响数据库性能。</p><p>缺点：恢复复杂，需要关闭数据库服务，可能导致<strong>数据不⼀致</strong>。</p><p>MySQL 有⼀个开源的物理热备⼯具叫做 Percona XtraBackup。它可以在不锁表的情况下备份 InnoDB、XtraDB  和 MyISAM 存储引擎的表，并且支持增量备份。你可以使用它来备份整个数据库实例或单个数据库。</p><p>例如，如果你想要全量备份⼀个叫 ytt 的数据库，你可以在命令行窗⼝输⼊：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex <span class="attribute">--user</span>=用户名 <span class="attribute">--password</span>=密码 <span class="attribute">--databases</span>=<span class="string">&quot;ytt&quot;</span> /backup</span><br></pre></td></tr></table></figure><p>如果你想要恢复这个目录到数据库中，你需要先准备好数据文件，然后拷贝到对应的数据目录中，并更改权限和所有者。具体步骤如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">innobackupex</span> --apply-log /backup/<span class="number">2023</span>-<span class="number">02</span>-<span class="number">27</span>_00-<span class="number">00</span>-<span class="number">00</span> cp -r /backup/<span class="number">2023</span>-<span class="number">02</span>-<span class="number">27</span>_00-<span class="number">00</span></span><br><span class="line"><span class="attribute">00</span>/* /var/lib/mysql chown -R mysql:mysql /var/lib/mysql</span><br></pre></td></tr></table></figure><p>请注意，在恢复之前，你需要停止MySQL 服务，并确保数据目录为空。</p><p><strong>全备份和增量备份</strong></p><p>全备份是指备份数据库中的所有数据，不管数据是否有变化。它的优点是恢复简单，不需要其他文件。它的缺点是占用空间大，耗时长，影响数据库性能。</p><p>增量备份是指只备份上次全备份或增量备份后发生变化的数据，需要开启 binlog 日志功能. 它的优点是占用空间小，耗时短，不影响数据库性能，它的缺点是恢复复杂，需要依赖 binlog 日志文件和全备份文件。</p><h3 id="5、⼀条-SQL-语句在-MySQL-中的执行过程是怎样的？"><strong>5、⼀条 SQL 语句在 MySQL 中的执行过程是怎样的？</strong></h3><p>[<img src="https://s21.ax1x.com/2024/07/05/pkRrf4e.png" alt="pkRrf4e.png"></p><p>[<img src="https://s21.ax1x.com/2024/07/05/pkRrWND.png" alt="pkRrWND.png"></p><ul><li><strong>连接器</strong>：客户端首先进行身份验证，如果没通过直接返回。</li><li><strong>查询缓存</strong>：如果身份验证不通过则查询缓存。缓存这个原理很容易理解，就是把常用的数据放到更高效的地方便于 查询。 查询缓存也有缺点，就是每当数据更改的时候就要重新设置缓存，<strong>在 MySQL8.0 已经将查询缓存去掉</strong>。</li><li><strong>分析器：<strong>分析器</strong>先会做“词法分析”</strong>。把你输⼊的内容进行识别，知道字符分别代表什么，有什么含义<strong>然后进行语法分析</strong>，如果你的 SQL 语句不符合 MySQL 语法就会收到错误提醒。</li><li><strong>优化器：<strong>优化器作用就是决定使用哪个索引，决定 join 表的连接顺序。 优化器会选择它</strong>自己认为最高效的方案</strong>， (也代表它不⼀定能选择出最优的方案)。</li><li>**执行器：**执行器还是先会判断有没有执行的权限，如果有权限的话才会执行下⼀步。遍历满足条件的行，并把组成的记录集作为结果集返回给客户端。</li></ul><h3 id="6、MySQL-中的索引是怎么实现的？B-树是什么，B-树和-B-树的区别，-为什么-MySQL-要用-B-树？">6、MySQL 中的索引是怎么实现的？B+ 树是什么，B 树和 B+ 树的区别， 为什么 MySQL 要用 B+ 树？</h3><p>MySQL 中的索引采用B+树实现。</p><p>B+树是⼀种多路搜索树，是对B树的⼀种改进。</p><p>B树和B+树的主要区别在于 :</p><ul><li><p>B+树<strong>只存储数据的索引信息</strong>，并且把叶子节点存储在同⼀层上，中间节点只起到索引作用，查询时只需要遍历⼀次树就能找到目标数据,因此B+树<strong>具有更好的查询性能和更少的磁盘I/O次数</strong>，B+树的叶⼦节点都连接成 了⼀个有序的链表，因此可以很方便地进行范围查询等操作。适合于数据库等存储大量数据的场景。</p></li><li><p>B树是⼀种<strong>平衡树</strong>，它的每个节点<strong>都存储有序的关键字</strong>，并且每个节点的子节点数目介于m/2和m之间。B树中的每个节点<strong>既可以存储数据，也可以存储索引信息</strong>，因此B树可以减少I/O次数，适合于文件系统等存储大量数据的场景。但是B树的<strong>查询性能相对较低</strong>，因为每个节点都可能存储数据，查询时需要遍历多个节点才能找到目标数据。</p><p>在MySQL中使用B+树作为索引的数据结构，主要是因为B**+树的查询性能好、⽀持范围查询、⽀持数据分页**等操作，适用于存储海量数据的场景。此外，B+树的索引结构相对简单，易于实现和维护，能够满足高并发、高可用性的数据库要求</p></li></ul><h3 id="7、MySQL-事务有哪些隔离级别、分别有什么特点，以及-MySQL-的默认隔离级别是什么？"><strong>7、MySQL 事务有哪些隔离级别、分别有什么特点，以及 MySQL 的默认隔离级别是什么？</strong></h3><ul><li><strong>读未提交</strong>（Read Uncommitted）：事务<strong>可以读取未提交的数据</strong>，可能<strong>会读到脏数据，会导致幻读、不可重 复读、脏读</strong>等问题；</li><li><strong>读已提交</strong>（Read Committed）：只能读取<strong>已经提交的数据</strong>，可以避免脏读问题，但是可能会<strong>遇到不可重复读、幻读</strong>问题。</li><li><strong>可重复读</strong>（Repeatable Read）：保证<strong>同⼀个事务中多次读取同⼀数据的结果是⼀致</strong>的，避免了脏读和不可重复读问题，但是可能会遇到<strong>幻读</strong>问题。</li><li><strong>序列化</strong>（Serializable）：最高的隔离级别，可以避免所有并发问题，但是并发性能非常低，开销很大。</li></ul><p>MySQL 的默认隔离级别是<strong>可重复读</strong>（Repeatable Read）。</p><ul><li><strong>脏读</strong>：<strong>⼀个事务读到了另⼀个事务未提交的数据</strong>。</li><li><strong>不可重复读：同⼀个事务多次读取同⼀数据得到不同结果。</strong></li><li><strong>幻读：指同⼀个事务前后读取的数据集合不⼀致。</strong></li></ul><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240601143307012.png" alt="image-20240601143307012"></p><h3 id="8、意向锁是什么？有什么作用？它是表级锁还是行级锁？">8、意向锁是什么？有什么作用？它是表级锁还是行级锁？</h3><p>在使用 InnoDB 引擎的表⾥时对某些记录加上**「共享锁」<strong>之前，需要先在表级别加上⼀个</strong>「意向共享锁」**</p><p>在使用 InnoDB 引擎的表⾥时对某些记录加上**「独占锁」<strong>之前，需要先在表级别加上⼀个</strong>「意向独占锁」**</p><p>也就是，当执行插⼊、更新、删除操作，需要先对表加上**「意向独占锁」**，然后对该记录加独占锁。</p><p><strong>意向锁的作用</strong></p><p>意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（lock tables … read）和独占表锁（lock tables … write）发生冲突。</p><p>表锁和行锁是满足读读共享、读写互斥、写写互斥的。</p><p><strong>作用：为了快速判断表里是否有记录被加锁</strong></p><p>意向锁是表级别锁</p><h3 id="9、MVCC-是什么？InnoDB-是如何实现-MVCC-机制的？">9、MVCC 是什么？InnoDB 是如何实现 MVCC 机制的？</h3><p>MVCC 是指<strong>多版本并发控制</strong>（Multiversion Concurrency Control），是⼀种<strong>并发控制机制</strong>，常用于数据库系统 中，用于<strong>实现事务的并发控制</strong>。它允许在<strong>同⼀时间多个事务对同⼀个数据集合进行读取操作</strong>，同时防止数据不⼀致和其他并发问题。</p><p>InnoDB 是 MySQL 中最常用的存储引擎之⼀，它的 MVCC 实现是通过<strong>在每行记录中添加两个隐藏的列</strong>，分别记录<strong>行的创建时间和过期时间</strong>，以此来判断事务对该行记录的可见性。当⼀个事务需要读取⼀行记录时，InnoDB 首先 读取这行记录的创建时间和过期时间，并根据这些信息判断该行记录是否可键。如果创建时间早于当前事务的开始时间，且过期时间晚于当前事务的开始时间，那么该行记录对当前事务可见。</p><p>在 InnoDB 中，MVCC 主要是通过实现以下几个机制来实现的：</p><ul><li><strong>事务版本号：<strong>每个事务都有⼀个</strong>唯⼀的版本号</strong>，用来标识该事务的创建时间。</li><li><strong>读取视图：<strong>每个事务在</strong>开始时都会创建⼀个读取视图</strong>，记录该事务开始时间和其他信息。在事务执行期间，所有读取操作都要检查该视图，以确定读取哪些版本的数据。</li><li>undo 日志：在事务执行期间，如果对数据进行修改，那么会先将原始数据复制⼀份到 undo ⽇志中。这样， 在回滚操作时就可以使用 undo ⽇志中的数据来还原原始数据。</li><li>快照读取：在某些情况下，事务需要读取⼀个数据的历史版本，而不是当前版本。这时可以使用快照读取来实现，即在读取时根据事务开始时间和 undo ⽇志来读取历史版本的数据。</li></ul><h3 id="10、覆盖索引和联合索引是什么？讲⼀下索引的最左前缀匹配原则。"><strong>10、覆盖索引和联合索引是什么？讲⼀下索引的最左前缀匹配原则。</strong></h3><p><strong>覆盖索引</strong></p><ul><li>是指 SQL 中 查询 的所有字段，在索引 <strong>B+ Tree 的叶子节点</strong>上都能找得到的那些索引，从⼆级索引中查询得到记录，而不需要通过<strong>聚簇索引</strong>查询获得，可以<strong>避免回表</strong>的操作。</li></ul><p><strong>联合索引</strong></p><ul><li>通过将<strong>多个字段组合成⼀个索引</strong>，该索引就被称为联合索引。</li></ul><p><strong>最左前缀匹配原则</strong></p><ul><li>联合索引的最左匹配原则，<strong>在遇到范围查询（如 &gt;、&lt;）的时候，就会停⽌匹配</strong>，也就是<strong>范围查询的字段可以用到联合索引</strong>，但是在范围<strong>查询字段的后面的字段⽆法用到联合索引</strong>。注意，对于 &gt;=、&lt;=、BETWEEN、 like 前缀匹配的范围查询，并不会停⽌匹配。</li></ul><h3 id="11、什么是-MySQL-执行计划？如何获取执行计划并对其进行分析？">11、什么是 MySQL 执行计划？如何获取执行计划并对其进行分析？</h3><p>MySQL 执行计划是 MySQL <strong>查询优化器分析 SQL 查询时生成的⼀份详细计划</strong>，包括表<strong>如何连接、是否走索引、表扫描行数</strong>等。通过这份执行计划，我们可以分析这条 SQL 查询中存在的问题（如是否出现全表扫描），从而进行针对优化。</p><ul><li><p>id：SELECT 查询的序列号，表示执行select子句的顺序（id 相同，执行顺序从上到下；id 不同，值越大越先执行；如果是并集结果，则 id 值为 NULL</p></li><li><p>select_type：查询类型，来区分简单查询、联合查询、子查询等。常见的类型有：</p><ul><li>SIMPLE：简单查询，不包含表连接或子查询</li><li>PRIMARY：主查询，外层的查询</li><li>SUBQUERY：子查询中第⼀个 SELECT</li><li>UNION：UNION 后面的 SELECT 查询语句</li><li>UNION RESULT：UNION 合并的结果</li></ul></li><li><p>table：查询用到的表名</p></li><li><p>partitions：匹配的分区，没有分区的表为 NULL</p></li><li><p>type ★：连接的类型，常见的类型有（性能从好到差）：</p><ul><li><p>system：存储引擎能够直接知道表的行数（如 MyISAM）并且只有⼀行数据</p></li><li><p>const：通过索引⼀次找到，通常在用主键或唯⼀索引时出现</p></li><li><p>eq_ref：用主键或唯⼀索引字段作为连接表条件</p></li><li><p>ref：用普通索引的字段作为连接表条件</p></li><li><p>range：对索引列进行范围查询</p></li><li><p>index：利用索引扫描全表</p></li><li><p>all：全表扫描</p></li></ul></li><li><p>possible_keys：可能用到的索引</p></li><li><p>key ★：实际使用的索引，没有使用为 NULL</p></li><li><p>key_len：索引字段的最大长度，在满足需求下越短越好</p></li><li><p>ref：当使用索引等值查询时，与索引作比较的列或常量</p></li><li><p>rows ★：预计扫描的行数，值越大，查询性能越差</p></li><li><p>filtered：表示返回结果的行数占需读取行数的百分比</p></li><li><p>Extra ★：有关查询执行的其他信息</p><ul><li>using index：使用覆盖索引，不用回表查询</li><li>using where：使用 where ⼦句来过滤结果集</li><li>using temporary：使用到临时表来存储中间结果，可能会导致性能问题</li><li>using filesort：查询需要进行文件排序操作，可能会导致性能问题</li><li>using index condition：先根据能用索引的条件获取符合条件的数据行，然后在根据其他条件去过滤数据。</li></ul></li></ul><h3 id="12、MySQL-支持哪些存储引擎？默认使用哪个？MyISAM-和-InnoDB-引-擎有什么区别，如何选择？">12、MySQL 支持哪些存储引擎？默认使用哪个？MyISAM 和 InnoDB 引 擎有什么区别，如何选择？</h3><p>MySQL ⽀持多种存储引擎，包括 <strong>InnoDB、MyISAM、MEMORY、CSV</strong> 等。默认情况下，MySQL 使用的存储引 擎是 InnoDB。</p><p>MyISAM 和 <strong>InnoDB</strong> 是 <strong>MySQL</strong> 中 最常用 的两种存储引擎，它们有以下<strong>区别</strong>：</p><ul><li><strong>锁定方式不同</strong>：MyISAM 使用<strong>表级锁定</strong>，而 InnoDB 使用<strong>行级锁定</strong>。在并发访问时，InnoDB 的锁定方式更加精细，可以避免锁定整个表，提高了并发性能。</li><li><strong>数据完整性不同</strong>：MyISAM <strong>不支持事务和外键约束</strong>，而 InnoDB <strong>⽀持事务和外键约束</strong>，可以保证数据的完整 性和⼀致性。</li><li><strong>读写性能不同：<strong>MyISAM 的</strong>读写性能相对较高*高，适合于</strong>读密集型<strong>应用；而 InnoDB 的</strong>写性能相对较高**，适合于写密集型应用。</li><li><strong>空间利用率不同：MyISAM 不⽀持行级别的存储</strong>，存储空间利用率较低；而 InnoDB ⽀持行级别的存储，存储空间利用率更高。</li></ul><p>选择应用场景：</p><ul><li>如果应用主要是<strong>读操作</strong>，可以考虑选择 MyISAM 引擎，以提高读取性能。</li><li>如果应用主要是<strong>写操作或需要⽀持事务和外键约束</strong>，可以考虑选择 InnoDB 引擎，以保证<strong>数据的完整性和⼀致性</strong>。</li><li>如果需要<strong>高性能和高可用性</strong>，可以考虑选择使用 <strong>MySQL 集群</strong>或使用多个副本实例，并将数据分布在不同的节点上。</li></ul><h2 id="Spring-框架">Spring 框架</h2><h3 id="1、Spring-框架是什么？使用-Spring-框架有哪些好处？">1、Spring 框架是什么？使用 Spring 框架有哪些好处？</h3><p>介绍</p><blockquote><p>Spring 框架是⼀个开源的 Java 应用程序框架，用于构建企业级应用程序。它提供了全面的基础设施⽀持，包括<strong>控制反转（IoC）</strong>、<strong>依赖注⼊</strong>（DI）、**AOP（面向切面编程）**等功能，使开发者可以更加专注于业务逻辑的实现，而不必处理底层的框架代码。</p></blockquote><ul><li>Spring 框架由多个模块组成，其中核心模块是 Spring Framework，它提供了许多常用的工具和服务</li></ul><p>Spring 框架的主要优点具体如下：</p><ul><li><strong>方便解耦</strong>，简化开发。 Spring 就是⼀个大工厂，可以将所有对象的创建和依赖关系的维护交给 Spring 管理。</li><li>方便集成各种优秀框架。 Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如 Struts2、Hibernate、MyBatis 等）的直接支持。</li><li>降低 Java EE API 的使用难度。 Spring 对 Java EE 开发中非常难用的⼀些 API（JDBC、JavaMail、远程调用等）都提供了封装，使这些 API 应用的 难度大大降低。</li><li>方便程序的测试。 Spring ⽀持 JUnit，可以通过注解方便地测试 Spring 程序。AOP 编程的⽀持。</li><li>Spring <strong>提供面向切面编程</strong>，可以方便地实现对程序进行权限拦截和运行监控等功能。</li><li><strong>声明式事务的支持</strong>。 只需要通过配置就可以完成对事务的管理，而无须⼿动编程。</li></ul><h3 id="-2"></h3><h3 id="2、Spring-的两大核心概念是什么？简单讲⼀下你对它们的理解">2、Spring 的两大核心概念是什么？简单讲⼀下你对它们的理解</h3><p>IOC:</p><ul><li>IOC(Inverse Of Controll,控制反转)：就是原来代码里面需要自己手动创建的对象，依赖，反转给Spring来帮忙实现。我们需要<strong>创建⼀个容器</strong>，同时<strong>需要⼀种描述</strong>来让容器知道要创建的对象与对象之间的关系。</li><li>在Spring中<strong>BeanFactory就是IOC容器</strong>，在Spring初始化的时候，创建容器，并将需要创建对象和对象的关系 （xml，注解）通过<strong>BeanDefinitionReader加载到BeanDefinition中并保存在BeanDefinitionMap中</strong>，然后再 由IOC容器创建bean对象.</li></ul><p>两种bean的注册方式</p><ul><li>通过**@Bean+@Configuration**的方式直接定义要创建的对象与对象的关系</li><li>通过**@Component定义类**，这种方式必须使用@ComponetScan定位Bean扫描路径</li></ul><p>AOP</p><ul><li>AOP 在面向对象编程（oop）思想中，我们将事物纵向抽成⼀个个的对象。而在面向切面编程中，我们将⼀个个的对象某些类似的方面横向抽成⼀个切面，对这个切面进行⼀些如权限控制、事物管理，记录日志等公用操作处理的过程就是面向切面编程的思想。<strong>AOP底层是动态代理</strong>，如果是<strong>接口采用JDK 动态代理</strong>，如果是类采用<strong>CGLIB方式实现动态代理</strong>。</li></ul><h3 id="-3"></h3><h3 id="3、什么是-IOC，简单讲⼀下-Spring-IOC-的实现机制？">3、什么是 IOC，简单讲⼀下 Spring IOC 的实现机制？</h3><p>IOC:</p><ul><li>IOC(Inverse Of Controll,控制反转)：就是原来代码里面需要自己手动创建的对象，依赖，反转给Spring来帮忙实现。我们需要<strong>创建⼀个容器</strong>，同时<strong>需要⼀种描述</strong>来让容器知道要创建的对象与对象之间的关系。</li></ul><p>两种bean的注册方式</p><ul><li>通过**@Bean+@Configuration**的方式直接定义要创建的对象与对象的关系</li><li>通过**@Component定义类**，这种方式必须使用@ComponetScan定位Bean扫描路径</li></ul><p>IOC的创建:</p><ul><li>在Spring中<strong>BeanFactory就是IOC容器</strong>，在Spring初始化的时候，创建容器，并将需要创建对象和对象的关系 （xml，注解）通过<strong>BeanDefinitionReader加载到BeanDefinition中并保存在BeanDefinitionMap中</strong>，然后再 由IOC容器创建bean对象。</li></ul><p>Bean的生命周期</p><ul><li>**bean 的实例化：**spring 启动后,会查找和加载需要被 spring 管理的 Bean,并且实例化</li><li><strong>bean 的属性注入(bean 的初始化)</strong>：bean被实例化后将 Bean 的引用和值注⼊到 bean的属性中<ul><li><strong>查看是否调用⼀些 aware 接⼝</strong>,比如 BeanFactoryAware,BeanFactoryAware,ApplicationContextAware  接⼝,分别会将 Bean 的名字,BeanFactory 容器实例,以及 Bean 所在的上下文引用传⼊给 Bean。</li><li>在初始化之前,会**查看是否调用了 BeanPostProcessor 的预初始化方法,**可以对 bean 进行扩展。</li><li><strong>调用InitializingBean 的 afterPropertiesSet()方法</strong>：如果 Bean 实现了 InitializingBean 接⼝，spring 将调用他们的afterPropertiesSet()方法，类似的，如果 Bean 使用 init-method 生命了初始化方法的话， 这个方法也会被调用。</li><li><strong>初始化成功之后,会查看是否调用 BeanPostProcessor 的初始化后的方法</strong>：如果 Bean 实现了  BeanPostProcessor 接⼝，spring 就将调用他们的 postprocessAfterInitialization()方法。可以对 bean  进行扩展。</li></ul></li><li><strong>bean的正常使用</strong>：可以被应用程序正常使用了,他们将驻留在上下文中,直到应用的上下文被销毁。</li><li><strong>bean的销毁：**<strong>调用 DisposableBean 的destory()方法</strong>：如果 Bean 实现 DisposableBean 接⼝，spring 将用 他的 destory()方法，相同的，如果 Bean 使用了 destory-method 生命销毁方法，该方法也会被调用。(但由 于 bean 也分为单例和多例,单例 <strong>bean 会随着 IOC 容器的销毁而销毁</strong>,多例的 bean 不会随着 IOC 容器的销毁 而销毁,他是</strong>通过 JVM ⾥面的垃圾回收器负责回收**）</li></ul><h3 id="4、Spring-框架中都用到了哪些设计模式？">4、Spring 框架中都用到了哪些设计模式？</h3><ul><li>**单例模式:**Spring 的 <strong>Bean 默认是单例模式</strong>，通过 Spring 容器管理 Bean 的生命周期，保证每个 Bean <strong>只被创建⼀次</strong>，并在整个应用程序中重用。</li><li><strong>工厂模式：<strong>Spring 使用工厂模式</strong>通过 BeanFactory 和 ApplicationContext 创建并管理 Bean 对象</strong>。</li><li>**代理模式：**Spring AOP 基于动态代理技术，使用代理模式实现切面编程，提供了对 AOP 编程的⽀持。</li><li>**观察者模式：**Spring 中的事件机制基于观察者模式，通过 ApplicationEventPublisher 发布事件，由  ApplicationListener 监听事件，实现了对象间的松耦合。</li><li><strong>模板方法模式</strong>：Spring 中的 JdbcTemplate 使用了模板方法模式，将⼀些固定的流程封装在父类中，子类只 需实现⼀些抽象方法即可。</li><li>**策略模式：**Spring 中的 HandlerInterceptor 和 HandlerExecutionChain 使用了策略模式，允许开发者自定义处理器拦截器，按照⼀定顺序执行。</li><li>**责任链模式：**Spring 中的过滤器和拦截器使用了责任链模式，多个过滤器和拦截器按照⼀定顺序执行，每个过滤器和拦截器可以拦截请求或者响应并做出相应的处理。</li></ul><h3 id="5、Spring、SpringMVC、SpringBoot-三者之间是什么关系？">5、Spring、SpringMVC、SpringBoot 三者之间是什么关系？</h3><ul><li>Spring 是⼀个 <strong>Java 的轻量级应用框架</strong>，提供了基于 <strong>IoC 和 AOP</strong> 的支持，用于构建企业级应用。Spring 有多 个模块，包括 Spring Core、Spring Context、Spring JDBC、Spring Web 等，每个模块提供了不同的功能。</li><li>SpringMVC <strong>是 Spring 框架的⼀部分</strong>，是<strong>基于 MVC 设计模式的 Web 框架</strong>，用于构建 Web 应用程序。它提供了<strong>控制器、视图解析器、数据绑定、异常处理</strong>等功能，使得开发 Web 应用变得更加简单。SpringMVC 还⽀持  RESTful 架构。</li><li>SpringBoot 是<strong>基于 Spring 框架的⼀个开发框架</strong>，用于快速构建独立的、生产级别的 Spring 应用程序。它<strong>通过自动配置和约定优于配置的方式</strong>，简化了 Spring 应用程序的配置和开发过程。SpringBoot 集成了很多常用的第三方库和⼯具，例如 Spring Data、Spring Security、Thymeleaf、Logback 等，可以极大地提高开发效 率。</li></ul><p>因此，SpringBoot 可以看作是<strong>在 Spring 的基础上，通过自动配置和约定优于配置的方式，提供了更加简单、快速 的开发体验</strong>。而 SpringMVC 则是 Spring 框架中用于构建 Web 应用程序的模块。</p><h3 id="6、有哪些注解可以注入Bean？-Autowired-和-Resource-的区别？">6、有哪些注解可以注入Bean？@Autowired 和 @Resource 的区别？</h3><p>哪些可以注入bean</p><ul><li>@Autowired：自动注入，<strong>按照类型自动装配</strong>，如果有多个同类型的 Bean，则需要通过 @Qualifier 指定具体 的 Bean。</li><li>@Resource：Java 自带的注入方式，<strong>按照名称自动装配</strong>，默认是按照属性名称进行匹配，如果需要按照 Bean  的名称进行匹配，可以使用 @Resource(name=“beanName”)。</li><li>@Inject：和 @Autowired 类似，也是按照类型进行自动装配，但是 <strong>@Inject 注解是 JSR-330 提供的</strong>，而  @Autowired 注解是 Spring 框架提供的。</li><li>@Value：用于注入配置文件中的属性值，可以指定默认值</li><li>@Component：用于<strong>声明⼀个 Bean</strong>，作用类似于 XML 中的  标签。</li></ul><p>注⼊ Bean 的时候最好使用接⼝类型作为注⼊对象，这样可以避免因为具体实现类变更导致注⼊失 败的问题</p><h3 id="7、Spring-如何处理线程并发问题，ThreadLocal-你了解过吗？">7、Spring 如何处理线程并发问题，ThreadLocal 你了解过吗？</h3><ul><li><p><strong>同步关键字 synchronized：<strong>使用synchronized 关键字可以</strong>对共享资源进行加锁</strong>，从而<strong>保证多线程访问时的同步性</strong>。但是，synchronized <strong>对性能</strong>会产生⼀定的影响，并且容<strong>易导致死锁</strong>等问题。</p></li><li><p><strong>Lock 接口：<strong>Lock 接口提供了比synchronized 更加灵活的加锁方式，并且可</strong>以防止死锁问题</strong>的发生。但是， Lock 接⼝的<strong>使用相对较复杂</strong>，需要⼿动进行加锁和解锁操作。</p></li><li><p><strong>ThreadLocal 类</strong>：ThreadLocal 类提供了<strong>线程本地变量</strong>的功能，可以让每个线程拥有自己的<strong>变量副本</strong>，从而避免了多个线程之间的<strong>共享问题</strong>。但是，ThreadLocal 类的使用需要<strong>注意内存泄漏问题</strong>。</p></li></ul><p>关于ThreadLocal</p><ul><li><p>ThreadLocal 是 Java 中的<strong>⼀个线程局部变量</strong>，它可以为每个<strong>线程</strong>提供⼀个<strong>独立的变量副本</strong>，避免了多线程之间的<strong>数据共享和数据竞争问题</strong>。</p></li><li><p>ThreadLocal <strong>可以在每个线程中存储⼀个对象</strong>，并且每个线程<strong>只能访问自⼰</strong>的对象，而不会影响其他线程中的对 象。</p></li><li><p>ThreadLocal 主要用于<strong>解决线程安全问题</strong>，例如在 Web 应用中，可以使<strong>用 ThreadLocal 存储用户的会话信息</strong>，这 样每个线程就可以独立地访问自己的会话信息，避免了多个线程之间的<strong>数据共享和数据竞争问题</strong>。</p></li><li><p>在 Spring 中，ThreadLocal 通常用于<strong>存储和传递⼀些与线程相关的上下文信息</strong>，例如<strong>当前登录用户的信息、请求 的 IP 地址</strong>等。可以将 ThreadLocal 对象定义为⼀个 Bean，然后在需要使用时注⼊到其他 Bean 中使用。</p></li></ul><h3 id="8、Spring-中的-BeanFactory-和-ApplicationContext-有什么区别和联系？">8、Spring 中的 BeanFactory 和 ApplicationContext 有什么区别和联系？</h3><p>BeanFactory 是 Spring 容器的超级接⼝。ApplicationContext 是 BeanFactory 的<strong>子接⼝</strong></p><p><a href="https://bu.dusays.com/2024/07/05/6687bc4e38b53.png"><img src="https://bu.dusays.com/2024/07/05/6687bc4e38b53.png" alt="image-20240605111144655.png"></a></p><p>区别</p><ul><li>BeanFactory 是 <strong>Spring 框架的基础设施</strong>，用于管理 Bean 的生命周期和依赖关系，提供了 IoC 和 DI 功能。 <strong>ApplicationContext 是 BeanFactory 的扩展</strong>，提供了更多的功能，例如国际化⽀持、AOP ⽀持等。</li><li>BeanFactory <strong>是延迟加载的</strong>，即只有在<strong>获取 Bean 时才会进行实例化</strong>，可以减少系统资源的占用。而  <strong>ApplicationContext 在启动时会⽴即加载所有的 Bean</strong>，导致启动时间较长。</li><li>BeanFactory <strong>是单例模式</strong>，即在整个应用中只有⼀个 BeanFactory 实例。而 ApplicationContext 可以<strong>有多个实例</strong>，并且可以通过⽗子容器的方式组织起来，方便模块化开发。</li></ul><p>联系</p><ul><li>BeanFactory 和 ApplicationContext <strong>都是用于管理 Spring Bean 的容器</strong>，可以管理 Bean 的生命周期和依赖 关系，提供了 <strong>IoC 和 DI</strong> 功能。</li><li>ApplicationContext <strong>是 BeanFactory 的扩展</strong>，提供了更多的功能，例如国际化⽀持、AOP ⽀持等，同时<strong>也支持 BeanFactory 的所有功能</strong>。</li><li>BeanFactory 和 ApplicationContext <strong>都可以管理单例 Bean 和原型 Bean</strong>，可以<strong>控制 Bean 的作用域和生命周期</strong>。</li></ul><h3 id="9、讲⼀讲-Spring-框架中-Bean-的生命周期？"><strong>9、讲⼀讲 Spring 框架中 Bean 的生命周期？</strong></h3><p>bean的生命周期有五个阶段</p><ul><li>创建前准备：主要是扫描 s<strong>pring 中的上下文和配置</strong>（解析和查找）bean 的⼀些扩展配置。</li><li>创建实例：在这个阶段<strong>调用 bean 的构造器进行实例的创建</strong>。这是<strong>通过反射进行实例的创建</strong>的，并且会扫描和解析 bean 的⼀些属性。</li><li>依赖注入：实例化的 bean 可能依赖其他的 bean，这个阶段就是<strong>注入实例的 bean 依赖的 bean</strong>，如用注解  @Autowired 进行依赖的注⼊。</li><li>容器缓存：这个阶段中，<strong>将实例化的 bean 放⼊容器和 spring 的缓存中</strong>，此时开发者可以使用实例化的 bean。</li><li>销毁实例：当 spring 的上下文关闭时，这些上下文的 bean 也会被销毁。</li></ul><p><a href="https://bu.dusays.com/2024/07/05/6687bc4e6a54e.png"><img src="https://bu.dusays.com/2024/07/05/6687bc4e6a54e.png" alt="image-20240605111603743.png"></a></p><h3 id="10、Spring-支持哪几种事务管理类型，Spring-的事务实现方式和实现原理是？">10、Spring 支持哪几种事务管理类型，Spring 的事务实现方式和实现原理是？</h3><ul><li><p>**编程式事务管理：**在代码中显式地编写事务管理相关代码，如开启事务、提交事务、回滚事务等。</p></li><li><p><strong>声明式事务管理：<strong>使用 <strong>AOP 技术</strong>，在代码中通过配</strong>置进行声明</strong>，从而实现对事务管理的控制。</p></li><li><p><strong>注解式事务管理：基于声明式事务管理</strong>，使用注解的方式进行事务的管理。</p></li></ul><p>Spring 事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring 是无法提供事务功能的。真正的数据库层的<strong>事务提交和回滚是通过binlog 或者 redolog 实现</strong>的。</p><ul><li><strong>事务管理器（Transaction Manager）</strong>：Spring 事务管理器是事务的核心组件，它负责管理事务的生命周期和事务的状态。Spring 事务管理器提供了多种实现，包括 JDBC、Hibernate、JPA、JTA 等，开发⼈员可以根据自己的需求来选择适合的事务管理器。</li><li><strong>事务代理（Transaction Proxy）</strong>：Spring 使用代理模式来实现事务管理，即通过代理对象来拦截被代理对象的方法调用，以实现事务的开启、提交或回滚等操作。Spring 事务代理有两种实现方式：基于 <strong>AOP 的代理 和基于动态代理</strong>的代理。</li><li><strong>事务切面（Transaction Aspect）</strong>：Spring 事务切面是⼀组<strong>通知（Advice）和切点</strong>（Pointcut）的组合，用于定义事务的行为，例如事务的开启、提交或回滚等操作。Spring 事务切面可以基于<strong>注解或 XML 配置</strong>来实现，开发⼈员可以根据自⼰的需求来选择适合的方式。</li><li>事务同步器（Transaction Synchronization）：Spring 事务同步器用于管理事务的提交或回滚时需要执行的⼀些操作，例如清理缓存、释放资源等。Spring 事务同步器通过 Synchronization 接⼝和  TransactionSynchronizationManager 类来实现，可以实现对事务的后置处理。</li></ul><h3 id="11、什么是-Spring-的依赖注入，依赖注入的基本原则以及好处？">11、什么是 Spring 的依赖注入，依赖注入的基本原则以及好处？</h3><p>依赖注⼊（Dependency Injection，简称 DI）是 Spring 框架中的⼀种设计模式，用于<strong>实现控制反转</strong>（Inversion  of Control，简称 IoC）。它是⼀种将对象之间的依赖关系从硬编码中解耦的方法。通过依赖注入，Spring 框架可以在运行时<strong>自动为类的属性、构造函数或方法参数提供所需的依赖对象</strong>，从而实现对象之间的松耦合。</p><p>原则</p><ul><li>高层模块不应该依赖低层模块。它们都应该依赖抽象。</li><li>抽象不应该依赖具体实现。具体实现应该依赖抽象。</li></ul><p>好处</p><ul><li><p>灵活性：通过依赖注入，对象之间的关系不再由程序员⼿动控制，而是由 Spring 容器动态地维护，可以灵活地组合和切换不同的对象实现。</p></li><li><p>可测试性：依赖注入可以使各个对象之间的依赖关系更加松散，方便进行单元测试和集成测试。</p></li><li><p>可扩展性：依赖注入将各个对象之间的依赖关系解耦，方便对系统进行扩展和升级。</p></li><li><p>可维护性：依赖注入可以减少重复代码，降低了代码的复杂度，使代码更加易于维护和修改。</p></li></ul><h3 id="12、什么是-AOP？有哪些实现-AOP-的方式？Spring-AOP-和-AspectJ-AOP-有什么区别？">12、什么是 AOP？有哪些实现 AOP 的方式？Spring AOP 和 AspectJ  AOP 有什么区别？</h3><p>AOP：Aspect Orlented Programming 面向切面编程；</p><p>实现区别：</p><ul><li><strong>Spring AOP 是基于动态代理实现的</strong>，通过 JDK 动态代理或 CGLIB 代理来生成代理对象，只能用于方法级别的 拦截和处理，在运行时织入。</li><li><strong>AspectJ AOP 是⼀个更加完整的 AOP 框架，基于字节码操作</strong>，⽀持更多的切面表达式和切面类型，可以在编译期、类加载期进行织⼊，性能更加高效</li></ul><p>实现方式：</p><ul><li>静态代理：⼿动编写代理类，实现增强逻辑。需要为每个目标类编写代理类，代码量大</li><li>JDK 动态代理：利用反射机制生成代理类，只能用于实现了接⼝的类</li><li>CGLIB 动态代理：利用字节码生成目标类的⼦类（即代理类），可以代理未实现接⼝的类</li><li>AspectJ AOP：使用 AspectJ 在编译期或类加载期对目标类进行织⼊</li></ul><p><a href="https://bu.dusays.com/2024/07/05/6687bc4e64110.png"><img src="https://bu.dusays.com/2024/07/05/6687bc4e64110.png" alt="image-20240606162009787.png"></a></p><h2 id="Redis缓存">Redis缓存</h2><h3 id="1、什么是-Redis？Redis-有哪些特点？Redis-有哪些常见的应用场景？">1、什么是 Redis？Redis 有哪些特点？Redis 有哪些常见的应用场景？</h3><p>Redis 是基于内存的键值型（key - value）的 NoSQL 数据库（非关系型数据库）。key ⼀般是 String 类型，而  value z支持丰富的数据类型，包括<strong>String、Hash、List、Set、SortedSet</strong> 这五种基本类型，此外还有 GEO、 BitMap、HyperLogLog 等其他类型。</p><p>redis有哪些特点？</p><ul><li>读写性能优异<ul><li>基于内存，内存的访问速度是比磁盘快很多的</li><li>采用单线程模型，不存在多线程的上下文切换，不需要考虑锁的问题。</li><li>使用 IO 多路复用模型，让 Redis 不需要创建额外的线程来监听客户端的大量请求，减少性能的消耗。</li><li>内置了多种优化过的数据结构实现</li></ul></li><li>所有操作命令都是原子性的</li><li>⽀持事务<ul><li>允许多个命令按顺序执行并不会被打断</li><li>不⽀持回滚</li></ul></li><li>支持数据持久化<ul><li>RDB：通过创建快照来获得存储在内存⾥面的数据在某个时间点上的副本</li><li>AOF：执行完更改数据的命令后，会将该命令记录到日志中</li></ul></li><li>⽀持分布式部署</li></ul><hr><p>Redis有哪些常见的应用场景？</p><ul><li>数据缓存<ul><li>将热点数据缓存到 Redis，提高数据读取和系统响应速度。</li><li>将用户凭证（如 token）存⼊ Redis，实现单点登录。</li></ul></li><li>分布式锁<ul><li>利用 Redis 的 setnx 命令实现互斥，对于 setnx 命令，如果 key 不存在则会设置 key 的值并返回 1，否 则直接返回 0。</li><li>因此，可以通过 setnx 命令去尝试获取锁，获取锁成功才能继续执行相应业务。</li><li>此外，还得给锁设置⼀个过期时间，防⽌系统出现问题导致锁⽆法释放。</li><li>如果需要更复杂的需求，可以采用 Redisson，它⾥面提供了多种分布式锁的实现。</li></ul></li><li>限时业务的运用<ul><li>Redis 中可以使用 <strong>expire 命令设置⼀个键的生存时间</strong>，到时间后 Redis 会删除它。利用这⼀特性可以运用在限时的优惠活动信息、⼿机验证码等业务场景。</li></ul></li><li>全局唯⼀ID<ul><li>Redis 由于 incrby 命令可以实现原⼦性的递增，所以可以<strong>用于唯⼀分布式序列号的生成</strong>。</li></ul></li><li>消息队列<ul><li>基于 List 实现：利用 LPUSH 和 RPOP；</li><li>基于 PUB/SUB 实现；</li><li>基于 Stream 实现。</li></ul></li><li>共同关注<ul><li>由于 Set ⽀持交集、并集、差集等功能，可以实现共同关注、共同爱好等功能。</li></ul></li><li>排行榜<ul><li>由于 SortedSet 是⽀持排序的，可以用于各种排行榜的场景。</li></ul></li><li>统计活跃用户<ul><li>利用 BitMap，以⽇期为 key，用户 ID 为 offset，当⽇活跃过就设置为 1。</li></ul></li><li>页面统计UV<ul><li>将访问指定页面的每个用户 ID 添加到 HyperLogLog 中，调用 PFCOUNT 获取。</li></ul></li></ul><p>因为<strong>我的项目中也有使用到Redis</strong>，在这里大胆猜测⼀下面试官会问到： 在你的项目中是怎么使用Redis的？</p><ul><li>在我的项目中使用 Redis 配合 Spring 的 redis-session，将用户的登录态存入 redis，实现单点登录。</li><li>对于系统的首页，为了加快响应速度，设置定时任务将首页数据缓存到 Redis中，避免了首页加载过慢用户体验差的情况。</li><li>对于用户加⼊队伍的限制，使用 Redisson 作分布式锁，防⽌了用户恶意请求加⼊超出限制数量的队伍。</li></ul><h3 id="2、讲⼀下-Redis-的单线程模型，IO-多路复用是什么？">2、讲⼀下 Redis 的单线程模型，IO 多路复用是什么？</h3><ul><li>Redis 是⼀款基于内存的高性能键值存储系统，采用<strong>单线程模型</strong>的设计。在 Redis 中，所有客户端的请求都是由⼀个单线程来处理的，这个<strong>单线程不断地从客户端套接字中读取命令请求</strong>，并将命令请求<strong>放⼊⼀个请求队列</strong>中。接 着，Redis 的事件处理器会按照⼀定的规则选择⼀个请求进行处理，处理完之后将响应结果返回给客户端。</li></ul><p>单线程模型的优点是可以<strong>避免多线程并发访问共享数据时的竞争和死锁问题</strong>，简化了系统的设计和调试。此外，由 于 Redis 的内存访问速度非常快，因此单线程处理请求也能够保证足够的性能。</p><p>IO多路复用：</p><ul><li>⼀个线程中同时监听多个文件描述符，⼀旦某个文件描述符就绪，就⽴即处理对应的事件。在  Redis 中，采用的是基于 epoll 的 IO 多路复用技术，可以实现高效的事件监听和响应。</li><li>在 Redis 中，客户端的请求是由⼀个单线程来处理的，而IO 操作却是通过 epoll 多路复用技术实现的。这种设计方式既能充分利用 CPU 的计算能力，又能够保证足够的 IO 处理能力，从而实现了高效的键值存储服务。</li></ul><h3 id="3、Redis-基础类型中的-String-底层实现是什么？">3、Redis 基础类型中的 String 底层实现是什么？</h3><p>String 底层实现是 <strong>SDS，也就是动态字符串</strong>。</p><p>Redis当中的动态字符串主要是对C语言中的做了⼀个封装，使得SDS具<strong>有动态扩容、O(1)复杂度的长度计算</strong>的特点。</p><p>并且避免了C字符串缓冲区溢出（C字符串不记录自身长度）。</p><p>当 SDS API 需要对 SDS 进行修改时，API 会先检查 SDS 的空间是否满足修改所需的要求，如果不满足的话，API 会自动将 SDS 的空间扩展至执行修改所需的大小。</p><p>SDS主要由三个部分组成：</p><ul><li>len 实际使用长度</li><li>free buf数组中未使用字节的数量</li><li>char buf[] 用于保存字符串</li></ul><h3 id="4、如何使用Redis-实现⼀个排行榜？">4、如何使用Redis 实现⼀个排行榜？</h3><p>Redis 实现排行榜是 Redis 中⼀个很常见的场景，主要使用的是 ZSet 进行实现，下面是为什么选用 ZSet：</p><ul><li><strong>有序性</strong>：排行榜肯定需要实现⼀个排序的功能，在 Redis 中有序的数据结构有 List 和 ZSet；</li><li><strong>支持分数操作</strong>：ZSet 可以对集合中的元素进行增删改查操作，十分贴合排行榜中用户分数动态变化的场景， 而 List 并不能针对分数进行操作，只有其中的 value 进行操作；</li><li>**支持范围查询：**ZSet 可以按照分数进行范围查询，如排行榜中的 Top10 需求就可通过该特性进行实现；</li><li>**支持去重：**由于 ZSet 属于 Set 的特殊数据结构，因此同样拥有 Set 不可重复的特性，对于排行榜中不可出现重复项的需求也十分贴合，而 List 只能手动去重。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ZADD scores <span class="number">95</span> &quot;王五&quot;</span><br><span class="line">ZADD scores <span class="number">92</span> &quot;赵六&quot;</span><br><span class="line"> # 查询排名前<span class="number">3</span>的学生信息</span><br><span class="line">ZRANGE scores <span class="number">0</span> <span class="number">2</span> WITHSCORES</span><br><span class="line"> # 查询排名前<span class="number">3</span>的打印</span><br><span class="line"><span class="number">1</span>) &quot;王五&quot;</span><br><span class="line"> <span class="number">2</span>) &quot;95&quot;</span><br><span class="line"> <span class="number">3</span>) &quot;赵六&quot;</span><br><span class="line"> <span class="number">4</span>) &quot;92&quot;</span><br><span class="line"> <span class="number">5</span>) &quot;张三&quot;</span><br><span class="line"> <span class="number">6</span>) &quot;90&quot;</span><br><span class="line"> # 删除学生“李四”的成绩信息</span><br><span class="line">ZREM scores &quot;李四&quot;</span><br></pre></td></tr></table></figure><p>在springBoot整合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加学生成绩</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addScore</span><span class="params">(String name, <span class="type">int</span> score)</span> &#123;</span><br><span class="line">    redisTemplate.opsForZSet().add(<span class="string">&quot;scores&quot;</span>, name, score);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 查询排名前N的学生成绩</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map.Entry&lt;String, Double&gt;&gt; getTopScores(<span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(<span class="string">&quot;scores&quot;</span>, <span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">            .stream()</span><br><span class="line">            .map(tuple -&gt; <span class="keyword">new</span> <span class="title class_">AbstractMap</span>.SimpleEntry&lt;&gt;(tuple.getValue(), </span><br><span class="line">tuple.getScore()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 删除某个学生的成绩</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeScore</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    redisTemplate.opsForZSet().remove(<span class="string">&quot;scores&quot;</span>, name);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="5、Redis-的持久化机制有哪些？说说各自的优缺点和应用场景？">5、Redis 的持久化机制有哪些？说说各自的优缺点和应用场景？</h3><p>redis中的持久化主要分为RDB和AOF</p><p>RDB：</p><ul><li><strong>RDB 持久化机制会在指定的时间间隔内对数据集做快照，将快照存储到磁盘中。</strong></li><li>RDB 的优缺点：对于<strong>数据恢复速度比较快</strong>，同时存<strong>储的文件也比AOF</strong> 小，缺点是可能会出现<strong>数据丢失</strong>的情况，因为快照的<strong>时间间隔越长</strong>，数据丢失的可能性就越大。、</li></ul><p>AOF</p><ul><li>AOF 持久化机制则会将<strong>每⼀次的写操作都追加到⼀个文件</strong>中，这个文件就是 AOF 文件。</li><li>AOF 文件保存了 Redis 服务器接收到的所有写命令，当 Redis 重启时，就可以使用 AOF 文件重建数据集。 AOF 的优缺点：<strong>数据丢失的可能性比 RDB 低，缺点是文件比 RDB 大，恢复速度比较慢</strong>。</li></ul><p>RDB+AOF混合使用</p><p>在混合持久化机制中，使用 <strong>AOF 持久化机制保存每次写操作，使用 RDB 持久化机制保存指定时间点的数据快照</strong>， 以此来达到数据恢复速度和数据完整性的平衡。</p><p>应用场景</p><ul><li>RDB 适合用于<strong>数据集比较大，数据恢复速度比较快</strong>的场景，例如备份、灾难恢复等；</li><li>AOF 适合用于<strong>数据集比较大，数据完整性比较重要</strong>的场景，例如⾦融、电商等行业。</li></ul><h3 id="6、如何用Redis-实现分布式-Session？">6、如何用Redis 实现分布式 Session？</h3><p>分布式 session 指在<strong>多个服务器间共享 session</strong>，我们可以使用 redis 来存储 session 来实现该功能。 在 redis 中我们<strong>通常使用 Hash 来存储 session</strong>。</p><p>具体步骤</p><ul><li>用户登录成功后，将 Session 存到 redis 中</li><li>将key设置为⼀个全局 id，格式可以采用“session:token”，其中 token 为 sessiond 的唯⼀标识。</li><li>将 session 的唯⼀标识 token 以 cookie 的形式返回给客户端，客户端在后续请求中都会携带这个 cookie。</li><li>后续请求中，服务器拿到客户端传来的 cookie，并根据它的值，也就是 token，去 redis 找对应的 session  数据。</li><li>用户退出登录后，将 session 删除。</li></ul><h3 id="7、讲⼀下-Redis-中的内存淘汰机制、有哪些内存淘汰策略？">7、讲⼀下 Redis 中的内存淘汰机制、有哪些内存淘汰策略？</h3><p>Redis 中的内存淘汰机制包括</p><ul><li>**定期删除：**Redis 可以设置⼀个定时器，定期扫描键空间中的键，并删除已经过期的键。</li><li><strong>惰性删除：<strong>当⼀个键过期时，Redis 不会⽴即删除该键，而是等到该键</strong>被访问时再删除</strong>。</li><li><strong>内存淘汰策略</strong>：当 Redis 内存占用达到上限时，会根据<strong>内存淘汰策略来选择⼀些键进行删除</strong>，以腾出更多的 内存空间。</li></ul><p>redis的内存淘汰策略包括</p><ul><li>**noeviction：**禁⽌删除键，即不做任何操作。</li><li><strong>allkeys-lru：<strong>从所有的键中选择</strong>最近最少使用的键</strong>进行删除。</li><li><strong>allkeys-random：<strong>从所有的键中</strong>随机选择⼀些键</strong>进行删除。</li><li>**volatile-lru：**从已设置过期时间的键中选择最近最少使用的键进行删除。</li><li>**volatile-random：**从已设置过期时间的键中随机选择⼀些键进行删除。</li><li>**volatile-ttl：**从已设置过期时间的键中选择剩余时间最短的键进行删除。</li></ul><h3 id="8、Redis-6-0-之后为何引⼊了多线程？6-0-之前为什么不使用多线程？">8、Redis 6.0 之后为何引⼊了多线程？6.0 之前为什么不使用多线程？</h3><p>在 Redis 6.0 之前，Redis 是<strong>单线程的</strong>，这是因为 Redis 的<strong>主要瓶颈是在 CPU 上</strong>。但是随着硬件的发展，现代服务 器的 CPU 核心数已经达到了几十个，这就导致 <strong>Redis 单线程模型无法充分利用多核处理器的性能</strong>。因此，Redis  6.0 引⼊了多线程，以提高 Redis 在多核处理器上的性能。</p><p>在6.0之前不用多线程的原因</p><ul><li>Redis <strong>单线程模型相对简单</strong>，容易维护和调试，代码逻辑也比较清晰。</li><li>Redis 的<strong>主要瓶颈在于 CPU，而不是 I/O</strong>，因此采用多线程模型并不能显著提高性能。</li><li>Redis 是⼀个<strong>内存型数据库</strong>，它的性能主要受到 <strong>CPU 和内存带宽</strong>的限制。采用多线程模型会<strong>增加线程之间的竞争和锁</strong>等开销，反而可能降低 Redis 的性能。</li></ul><h3 id="9、Redis-有哪些数据类型？基础数据结构有几种？你还知道哪些-Redis-的高级数据结构？">9、Redis 有哪些数据类型？基础数据结构有几种？你还知道哪些 Redis  的高级数据结构？</h3><p>基础：</p><p><a href="https://bu.dusays.com/2024/07/05/6687bc4e7c40b.png"><img src="https://bu.dusays.com/2024/07/05/6687bc4e7c40b.png" alt="image-20240610141542391.png"></a></p><p>高级：</p><p><a href="https://bu.dusays.com/2024/07/05/6687bc4e62281.png"><img src="https://bu.dusays.com/2024/07/05/6687bc4e62281.png" alt="image-20240610141606414.png"></a></p><h3 id="10、Redis-为什么快？">10、Redis 为什么快？</h3><ul><li><p><strong>内存存储</strong>：Redis 的数据都是存储在内存中的，相比于硬盘存储的数据库，内存存储速度更快。</p></li><li><p><strong>单线程模型：<strong>Redis 使用单线程模型处理所有的请求，避免了</strong>多线程之间的线程切换和竞争等开销</strong>，提高了处理请求的效率。</p></li><li><p><strong>非阻塞 I/O</strong>：Redis 使用<strong>非阻塞 I/O 处理网络通信</strong>，当⼀个客户端请求到来时，Redis 不会⼀直等待客户端的响应，而是会先处理其它的请求，这样就避免了 I/O 阻塞带来的性能问题。</p></li><li><p>**精简高效的数据结构：**Redis 内置了多种高效的数据结构，如哈希表、跳表等，这些数据结构的实现非常精简高效，减少了 Redis 对内存和 CPU 的占用，从而提高了 Redis 的性能。</p></li><li><p><strong>持久化策略</strong>：Redis 支持多种持久化策略，如 RDB（快照）和 AOF（追加式文件）等，这些策略可以将内存 中的数据保存到硬盘中，以保证数据的<strong>持久性和安全性</strong>。同时，Redis 可以将数据以压缩的方式存储在硬盘中，减少了硬盘的占用，提高了数据的读写速度。</p></li></ul><h3 id="11、如何使用-Redis-实现分布式锁？">11、如何使用 Redis 实现分布式锁？</h3><p>redis实现分布式锁的方式有两种：</p><ul><li>通过 redis 提供的 <strong>setnx 进行实现</strong>，往 redis 中使用 setnx 插⼊ key 时，如果 key 存在，则返回 0，可以通过 插⼊ key 的返回值进行判断来实现分布式锁。</li><li>通过使用 Redission（客户端）来实现分布式锁。可以调用 Redission 提供的 api，即 lock()，unlock()方法进 行加锁和锁的释放。此外， Redission 还提供了 <strong>watchdog，即看门狗，来对加锁的 key 每隔 10 s对该 key  进行续时</strong>，（从而避免锁的过期）。</li><li>Redission 的所有指令是通过 lua 脚本进行实现的，lua 脚本可以保证所有指令执行的原子性</li></ul><h3 id="12、如何用-Redis-中的-HyperLogLog-统计页面-UV">12、如何用 Redis 中的 HyperLogLog 统计页面 UV?</h3><ul><li>**创建⼀个 HyperLogLog 数据结构：**使用 Redis 的 PFADD 命令创建⼀个 HyperLogLog 数据结构，用于记录 所有访问过该页面的用户的信息。例如，使用以下命令创建⼀个名为 “page_uv” 的 HyperLogLog：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFADD page_uv user1 user2 user3</span><br></pre></td></tr></table></figure><ul><li>**统计 HyperLogLog 的基数：**使用 Redis 的 PFCOUNT 命令可以统计 HyperLogLog 的基数，即访问过该⻚面 的唯⼀用户数。例如，使用以下命令可以统计名为 “page_uv” 的 HyperLogLog 的基数：</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">PFCOUNT page_uv</span></span><br></pre></td></tr></table></figure><ul><li>**定期合并 HyperLogLog：**为了保证统计结果的准确性，需要定期合并多个 HyperLogLog。使用 Redis 的  PFMERGE 命令可以将多个 HyperLogLog 合并为⼀个 HyperLogLog。例如，使用以下命令可以将名为  “page_uv1” 和 “page_uv2” 的 HyperLogLog 合并为⼀个名为 “page_uv” 的 HyperLogLog：</li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFMERGE page_uv page_uv1 page_uv2</span><br></pre></td></tr></table></figure><h2 id="计算机网络">计算机网络</h2><h3 id="1、简述计算机网络七层模型和各自的作用？">1、简述计算机网络七层模型和各自的作用？</h3><p>计算机网络七层模型是⼀个把<strong>网络通信协议分为七个层次的标准模型</strong>，其目的是为了<strong>让计算机网络的设计和管理更加灵活和模块化</strong>。这个模型被称为OSI模型（Open System Interconnection Model），它由国际标准化组织 （ISO）于1984年发布，是⼀个开放的标准模型。</p><p>每个层次都有自己的独立功能和责任，这种分层的方式使得每个层次都可以独立⼯作，同时还能够很好地协调上下层之间的数据传输，而不需要依赖于其他层次的实现细节。以下是每个层次的具体功能和责任：</p><ul><li><strong>物理层：<strong>主要负责通过</strong>物理媒介传输比特流</strong>。物理层规定了物理连接的规范，包括电缆的类型、接口的规范等。</li><li><strong>数据链路层：<strong>主要负责把</strong>数据分成数据帧进行传输</strong>，并对错误进行检测和纠正。数据链路层还负责物理地址的分配、数据流量控制、错误校验等。</li><li><strong>网络层：<strong>主要负责</strong>数据在网络中的传输</strong>，包括路由选择、分组转发、数据报文的封装等。网络层还处理数据包的寻址和控制流量等。</li><li><strong>传输层：<strong>主要负责</strong>数据传输的可靠性和流量控制等</strong>，同时还包括分段、组装、连接建⽴和断开等功能。传输层 的最重要的两个协议是 TCP 和 UDP。</li><li><strong>会话层：<strong>主要</strong>负责建立、管理和终止会话，提供会话控制和同步等服务</strong>。会话层还负责处理多个应用程序之间 的数据交换。</li><li><strong>表示层：<strong>主要</strong>负责数据格式转换、加密解密、压缩解压等服务</strong>。表示层使得应用程序可以使用不同的数据格式和编码，同时还提供了数据的安全性和完整性保护等服务。</li><li><strong>应用层：<strong>主要</strong>提供各种服务和应用程序</strong>，如电子邮件、文件传输、远程登录、Web 浏览等。应用层服务可以使用不同的协议实现，如 HTTP、SMTP、FTP、TELNET 等</li></ul><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240612115959575.png" alt="image-20240612115959575"></p><h3 id="2、HTTP-是哪⼀层的协议？简述它的作用？"><strong>2、HTTP 是哪⼀层的协议？简述它的作用？</strong></h3><ul><li>HTTP（Hypertext Transfer Protocol）是<strong>应用层协议</strong>，是互联网上使用最广泛的协议之⼀。它基于客户端-服务器模型，通过在<strong>客户端和服务器之间传输文本数据来进行通信</strong>。HTTP通常使用TCP作为传输层协议，也可以使用 TLS/SSL进行加密。</li><li>HTTP的作用：是定义了<strong>客户端和服务器之间的通信方式</strong>，使得客户端可以向服务器请求资源，并且服务器可以向客 户端发送响应结果。HTTP使用<strong>URL</strong>（Uniform Resource Locator）来定位资源，通过<strong>请求方法</strong>（如GET、POST、 PUT、DELETE等）来描述对资源的操作，通过请求头和响应头来传递附加信息，如编码格式、内容类型、Cookie 等</li></ul><p>主要特点</p><ul><li><strong>简单易用：<strong>HTTP 协议采用</strong>文本格式传输数据</strong>，易于人类阅读和编写，使用简单。</li><li><strong>无状态：<strong>HTTP 是⼀种</strong>无状态协议，每次请求和响应之间相互独立</strong>，服务器不会保存任何客户端信息，客户端需要自行维护会话状态。</li><li><strong>可扩展性：<strong>HTTP 允许</strong>通过扩展头部信息和请求方法等方式进行扩展</strong>，支持自定义数据传输格式和协议。</li><li><strong>非连接型：<strong>HTTP 是⼀种</strong>非连接型协议，每个请求和响应之间相互独立</strong>，不存在长期的连接状态。</li></ul><h3 id="3、HTTP-有哪些常见的状态码？">3、HTTP 有哪些常见的状态码？</h3><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240612120838109.png" alt="image-20240612120838109"></p><ul><li>1xx：提示信息，中间状态，实际用到的比较少</li><li>2xx：表示服务器成功处理了客户端的请求<ul><li>200 OK</li><li>204 No Content 也是成功，但响应头<strong>没有 body 信息</strong></li><li>206 Partial Content <strong>分块下载，断点续传</strong>，表示返回的 body 只是⼀部分</li></ul></li><li>3xx：表示客户端的请求资源发生了变动，需要客户端用新的 URL 重新发送请求，也就是<strong>重定向</strong>。<ul><li>301 Moved Permanently <strong>永久重定向</strong>，请求的资源不存在了</li><li>302 Found <strong>临时重定向</strong>，请求资源还在</li><li>304 Not Modified 不具有跳转的含义，<strong>缓存重定向</strong>，用于缓存控制。</li></ul></li><li>4xx：客户端发送的报文有误，服务器无法处理<ul><li>400 Bad Request <strong>客户端请求</strong>的报文有错误</li><li>403 Forbidden 服务器禁止访问。</li><li>404 Not Found 服务器上不存在</li></ul></li><li>5xx：客户端请求报文正确，但是服务器内部发生了错误，属于服务端的错误码<ul><li>500 Internal Server Error 服务器内部错误</li><li>501 Not Implemented 请求的功能还不⽀持，即将开业敬请期待</li><li>502 Bad Gateway 服务器作为⽹关和代理返回的错误码</li><li>503 Service Unavaliable 服务器很忙</li></ul></li></ul><h3 id="4、TCP-和-UDP-协议有什么区别，分别适用于什么场景？">4、TCP 和 UDP 协议有什么区别，分别适用于什么场景？</h3><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240613121901134.png" alt="image-20240613121901134"></p><h3 id="5、HTTP-协议中-GET-和-POST-有什么区别？分别适用于什么场景？">5、HTTP 协议中 GET 和 POST 有什么区别？分别适用于什么场景？</h3><ul><li><p><strong>参数传递方式不同</strong></p><ul><li>GET 请求参数是在 <strong>URL 中以键值对</strong>的形式传递的</li><li>而 POST 请求参数是在<strong>请求体中以键值对</strong>的形式传递的。</li></ul></li><li><p><strong>参数传递大小不同</strong></p><ul><li>因为 <strong>URL 长度有限制</strong>，不同的浏览器和服务器对 URL 长度的 限制不同，⼀般为 2048 个字符</li><li>而 POST 请求参数<strong>没有大小限制</strong>，因为它们是以请求体的形式传递的。</li></ul></li><li><p><strong>安全性不同</strong></p><ul><li>GET 请求的参数是<strong>明文传输</strong>的，因为<strong>参数在 URL</strong> 中，如果涉及敏感信息（如密码），容易被窃取或暴露 在浏览器历史记录、代理服务器日志等地方。</li><li>而 POST 请求的<strong>参数在请求体中传输</strong>，相对安全⼀些，但是也需要注意<strong>参数加密和防⽌ CSRF 攻击</strong>等问 题</li></ul></li><li><p><strong>GET 和 POST 适用的场景不同：</strong></p><ul><li>GET 请求适用于<strong>获取数据，如浏网页</strong>、搜索等。因为 GET 请求参数以明文形式传输，容易被拦截和篡 改，所以不适用于提交敏感信息的操作。</li><li>POST 请求适<strong>用于提交数据，如登录、注册、发布内容</strong>等。因为 POST 请求参数在请求体中传输，相对 安全⼀些，可以提交敏感信息，但是需要注意参数加密和防⽌ CSRF 攻击等问题。</li></ul></li></ul><h3 id="6、简述-TCP-三次握手、四次挥手的流程？为什么需要三次握手？为什么需要四次挥手？">6、简述 TCP 三次握手、四次挥手的流程？为什么需要三次握手？为什么需要四次挥手？</h3><p>三次握⼿的过程如下</p><ul><li>第⼀次握手：客户端向服务器发送 SYN 报文，请求建立连接。</li><li>第⼆次握手：服务器收到客户端的 SYN 报文，向客户端发送 SYN+ACK 报文，表示可以建立连接。</li><li>第三次握⼿：客户端收到服务器的 SYN+ACK 报文，向服务器发送 ACK 报文，表示连接已经建⽴。</li></ul><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240613122639879.png" alt="image-20240613122639879"></p><p><strong>为什么需要三次握手：</strong></p><p>三次握⼿的目的是为了确认双方的收发能⼒和同步初始序列号。</p><p>四次挥手的过程如下</p><ul><li><p>第⼀次挥手：客户端向服务器发送 FIN 报文，请求关闭连接。</p></li><li><p>第⼆次挥手：服务器收到客户端的 FIN 报文，向客户端发送 ACK 报文，表示收到关闭请求。</p></li><li><p>第三次挥⼿：服务器向客户端发送 FIN 报文，请求关闭连接。</p></li><li><p>第四次挥手：客户端收到服务器的 FIN 报文，向服务器发送 ACK 报文，表示收到关闭请求。</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240613122843281.png" alt="image-20240613122843281"></p></li></ul><p><strong>为什么需要四次挥手？</strong></p><p>四次挥手的目的是为了保证<strong>数据的完整性和可靠性</strong>。在关闭连接之前，双方需要确保所有数据都已经传输完毕，因 此需要通过四次挥手的过程进行确认和处理。</p><p><strong>总结：三次握⼿的本质是确认通信双方收发数据的能⼒ ，四次挥⼿的目的是关闭⼀个连接。</strong></p><h2 id="操作系统">操作系统</h2><h3 id="1、什么是进程和线程？它们有哪些区别和联系？">1、什么是进程和线程？它们有哪些区别和联系？</h3><p>在操作系统中，进程是指⼀个正在执行中的程序，而线程是进程的⼀部分，是⼀个程序中执行的代码片段。</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240614104819769.png" alt="image-20240614104819769"></p><h3 id="2、死锁是什么？如何预防和避免死锁？">2、死锁是什么？如何预防和避免死锁？</h3><p>死锁是什么？</p><ul><li>多线程编程中，当两个线程为了<strong>保护两个不同的共享资源而使用了两个互斥锁</strong>，如果应用不当，会造成两个线程<strong>都在等待对方释放锁</strong>，没有外力的作用下，这些线程会⼀直互相等待，就没办法继续运行，这就是发生了死锁。</li></ul><p>产生死锁的四个必要条件</p><ul><li><strong>互斥条件</strong>：多个线程不能同时使用⼀个资源。</li><li><strong>持有并等待条件</strong>：线程A在等待资源2的同时并不会释放自己已经持有的资源1。</li><li><strong>不可剥夺条件</strong>：在自己使用之前不能被其他线程获取。</li><li><strong>环路等待条件</strong>：两个线程获取资源的顺序构成了环形链</li></ul><p>预防和避免死锁的措施</p><ul><li><strong>避免资源独占</strong>：尽量避免⼀个进程在获得了某些资源后<strong>再次请求其他资源</strong>，而应该将所有需要的资源⼀次性申请到位。</li><li><strong>避免资源持有和等待</strong>：当⼀个进程占用了⼀些资源并等待另⼀些资源时，其他进程就⽆法使用这些资源，容易引发死锁。因此<strong>尽可能减少资源持有和等待时间</strong>。</li><li>**避免资源互斥：**有些资源在同⼀时间只能被⼀个进程占用，比如打印机、磁带机等，需要采用⼀些技术⼿段来避免资源互斥的问题。</li><li><strong>引⼊资源剥夺策略</strong>：当⼀个进程请求的资源被其他进程占用时，可以采取<strong>剥夺资源的策略</strong>，即<strong>暂停占用该资源的进程</strong>，直到该资源被释放后再恢复该进程的执行。</li><li><strong>引⼊进程抢占策略</strong>：当⼀个进程等待时间过长时，可以采取抢占其资源的策略，即中断正在执行的进程，强制释放其占用的资源。</li></ul><p>例⼦1：线程之间如何避免死锁</p><ul><li>线程A和线程B获取资源的顺序要⼀样</li><li>线程 A 是先尝试获取资源 A，然后尝试获取资源 B 的时候</li><li>线程 B 同样也是先尝试获取资源 A，然后尝试获取资源 B</li><li>线程 A 和 线程 B 总是以相同的顺序申请自己想要的资源。</li></ul><p>例⼦2：MySQL 如何避免死锁</p><ul><li>设置事务等待锁的超时时间</li><li>开启主动死锁检测</li></ul><h3 id="3、线程间有哪些通信方式？">3、线程间有哪些通信方式？</h3><ul><li>**共享内存：**多个线程共享同⼀块内存空间，通过对内存的读写操作实现线程间的信息交换。可以使用synchronized 关键字或 Lock 接⼝等机制来确保线程安全。</li><li>**消息队列：**⼀个线程向消息队列中放⼊⼀条消息，另⼀个线程从消息队列中取出消息。</li><li>**管道：**管道是⼀种特殊的流，用于在线程之间传递数据。Java 中的 PipedInputStream 和 PipedOutputStream 类 就是管道的实现。</li><li><strong>信号（Signal）</strong>：信号是⼀种异步通信方式，进程收到信号后，会根据信号的类型做出相应的处理。</li><li><strong>RPC调用</strong>：远程过程调用（RPC）是⼀种跨网络进行的远程调用，可以实现在不同的线程或机器之间进行信息交换。</li></ul><h3 id="4、什么是零拷贝？说⼀说你对零拷贝的理解？">4、什么是零拷贝？说⼀说你对零拷贝的理解？</h3><p>零拷贝（Zero-Copy）是⼀种高效的数据传输技术，它可以将数据<strong>从内核空间直接传输到应用程序的内存空间</strong>中， 避免了不必要的数据拷贝，从而提高了数据传输的效率和性能。</p><p>传统：</p><p>传统的数据传输方式中，当应用程序需要从磁盘、网络等外部设备中读取数据时，操作系统需要先将数据从外部 设备拷贝到内核空间的缓冲区，然后再将数据从内核空间拷贝到应用程序的内存空间中，这个过程中需要进行两次数据拷贝，浪费了大量的 CPU 时间和内存带宽。</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240615190415375.png" alt="image-20240615190415375"></p><p>零拷贝</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240615190429383.png" alt="image-20240615190429383"></p><p>数据可以<strong>直接从外部设备复制到应用程序的内存空间中，避免了中间的内核空间缓冲区，减少了不必要的数据拷贝</strong>，提高了数据传输的效率和性能。</p><h2 id="分布式">分布式</h2><h3 id="1、什么是分布式？为什么需要分布式？">1、什么是分布式？为什么需要分布式？</h3><ul><li><p>分布式是指在多台计算机上协同⼯作的系统，这些<strong>计算机通过网络连接在⼀起，共同完成⼀个任务</strong>。</p></li><li><p>分布式系统能够有效地解决单台计算机处理能力不足、系统容易宕机、数据存储容量有限等问题，同时能够提高系统的可靠性、可用性和性能，适用于数据量较大、并发量高、访问频繁的场景。</p></li><li><p>分布式系统还可以通过横向扩展的方式提高系统的性能和可靠性，同时降低单点故障的风险，提高了系统的可伸缩性，方便进行升级和维护。</p></li></ul><p>在分布式系统中，由于数据和计算任务被分布在多台计算机上，不同计算机之间需要进行通信和协调，因此需要解决分布式⼀致性、负载均衡、故障恢复、数据共享和安全等问题，同时需要考虑数据的⼀致性和可靠性。因此，分布式系统的设计和实现比单机系统更加复杂和困难，需要考虑到多个因素的综合影响。</p><h3 id="2、什么是网关，网关有哪些作用？">2、什么是网关，网关有哪些作用？</h3><p>网关（Gateway）是连接两个或多个不同网络的设备，可以实现<strong>协议的转换、数据的转发和安全策略</strong>的实现等功能。简单来说，网关是<strong>设备与路由器之间的桥梁</strong>，由它将不同的网络间进行访问的控制，转换，交接等等。 常见的网关有<strong>应用网关、协议网关、安全网关</strong>等。</p><p>网关的作用</p><ul><li><strong>实现协议的转换</strong>：不同网络之间通常使用不同的协议，通过网关可以实现协议的转换，使得不同网络之间能够相互通信。</li><li><strong>提供数据转发功能</strong>：网关可以对传输的数据进行过滤、路由、转发等处理，确保数据的可靠传输。</li><li><strong>实现安全策略</strong>：网关可以对传输的数据进行加密、认证、授权等操作，保证数据的安全性和可靠性。</li><li>**提供缓存功能：**网关可以将⼀部分数据缓存起来，提高数据的访问速度和响应性能。</li><li>**支持负载均衡：**网关可以将请求分配到不同的服务器上，实现负载均衡，提高系统的可用性和性能。</li><li><strong>实现访问控制</strong>：网关可以对访问进行控制，防止未授权的访问和攻击，提高系统的安全性。</li></ul><h3 id="3、Dubbo-是什么？是否了解过它的架构设计？">3、Dubbo 是什么？是否了解过它的架构设计？</h3><p>Apache Dubbo 是⼀款<strong>高性能的 Java RPC 框架</strong>。其前身是阿⾥巴巴公司开源的⼀个高性能、轻量级的开源 Java  RPC 框架，可以和 Spring 框架⽆缝集成。</p><p><strong>什么是RPC ？</strong></p><p>RPC 全称为 remote procedure call，即<strong>远程过程调用</strong></p><p>比如两台服务器 A 和 B，A 服务器上部署⼀个应用，B 服务器上部署⼀个应用，A 服务器上的应用想调用B 服务器 上的应用提供的方法，由于两个应用不在⼀个内存空间，不能直接调用，所以需要通过网络来表达调用的语义和传达调用的数据。</p><p>Dubbo架构图</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240616151207120.png" alt="image-20240616151207120"></p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240616151219081.png" alt="image-20240616151219081"></p><p><strong>调用关系说明</strong></p><ul><li>1.服务容器负责启动，加载，运行服务提供者。</li><li>2.服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>3.服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>4.注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>5.服务消费者，从提供者地址列表中，基于负载均衡算法，选⼀台提供者进行调用，如果调用失败，再选另⼀台调用。</li><li>6.服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送⼀次统计数据到监控中心。</li></ul><h3 id="4、什么是分布式的-CAP-理论？">4、什么是分布式的 CAP 理论？</h3><p>分布式的 CAP 理论是指在分布式系统中，<strong>⼀致性（Consistency）</strong>、**可用性（Availability）和分区容错性 （Partition Tolerance）**这三个指标⽆法同时满足的问题。具体来说：</p><ul><li>**⼀致性（Consistency）：**指多个副本之间数据保持⼀致，即在⼀个副本上的写操作会立即同步到其他所有副本，所有副本的数据都是最新的，<strong>保持强⼀致性</strong>。</li><li><strong>可用性（Availability）</strong>：指系统在任何时候都能对外提供服务，<strong>即系统随时能够响应用户请求</strong>，不会因为节点故障或其他原因而导致服务中断。</li><li><strong>分区容错性（Partition Tolerance）</strong>：指系统在出现<strong>网络分区（节点之间失去联系</strong>）时，仍能够继续⼯作，保证数据的⼀致性和可用性。</li></ul><p>CAP 理论指出，⼀个分布式系统<strong>只能同时满足其中的两个指标，无法同时满足三个</strong>。</p><p>然而实际上，<strong>分区容错性是⼀定要满足的</strong>，因为不可能只要出现分区问题时整个系统就完全无法使用。因此，在分布式系统中，我们需要考虑的是当出现分区问题时，选择的是<strong>⼀致性还是可用性</strong>，<strong>即 CP 还是 AP</strong>。</p><ul><li><strong>CP 架构：<strong>当系统出现分区故障时，客户端发送的任意请求都会被卡死或超时，保证</strong>数据的强⼀致性</strong>。如  Zookeeper。</li><li><strong>AP 架构：<strong>当系统出现分区故障时，客户端</strong>依旧能获取数据</strong>，但有的是新数据，有的是旧数据。如 Eureka。</li></ul><h3 id="5、什么是-RPC？目前有哪些常见的-RPC-框架？实现-RPC-框架的核心原理是什么？">5、什么是 RPC？目前有哪些常见的 RPC 框架？实现 RPC 框架的核心原理是什么？</h3><p>RPC 是远程过程调用（Remote Procedure Call）的缩写，是⼀种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。</p><p>RPC 的主要功能目标是让构建分布式计算/应用更加容易，在提供强大的远程调用能力时不损失本地调用的语义简洁性。</p><p><strong>常见的RPC框架</strong></p><ul><li>gRPC：是由 Google 开发的⼀个基于 HTTP/2和Protocol Buffers 的高性能、跨语言的 RPC 框架，支持多种编程语言，如：java、C++、Python 等</li><li>Dubbo：是由阿里巴巴开发的⼀个基于 java 的高性能、轻量级的 RPC 框架，支持多种协议和注册中心，如： zookeeper、Nacos 等等。</li><li>Thrift：是由 FaceBook 开发的⼀个基于⼆进制协议和多种传输层的 RPC 框架，支持多种编程语言，如： java、c++、Python 等</li></ul><p>RPC框架的核心原理</p><p>RPC 框架的核心原理是通过代理、序列化、网络传输、反序列化、反射等技术，实现远程过程调用的透明化。核心流程如下：</p><ul><li>客户端通过代理对象（Proxy）调用远程服务，代理对象将调用信息（比如方法名、参数等）进行序列化 （Serialzation），转换成字节流；</li><li>客户端通过网络传输（Transport）将序列化厚的字节流发送给服务端，服务端收到字节流后进行反序列化 （Deserialization），还原成调用信息。</li><li>服务端通过反射（Reflection）根据调用信息找到对应的服务信息（Service）和方法（Method），并执行方 法，得到返回结果。</li><li>服务端将返回结果进行序列化，转换成字节流，通过网络传输发送给客户端，客户端接收到字节流后，进行反序列化，还原成返回结果。</li><li>客户端通过代理对象返回结果给调用者，完成远程过程调用。</li></ul><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240616152727468.png" alt="image-20240616152727468"></p><h3 id="6、什么是注册中心？如何实现⼀个注册中心？">6、什么是注册中心？如何实现⼀个注册中心？</h3><p>注册中心是服务实例信息的存储仓库，也是服务提供者和服务消费者进行交互的桥梁。它主要提供了<strong>服务注册和服务发现</strong>这两大核心功能。在⼀个分布式系统中，不同的服务会以微服务的形式运行在不同的机器上，它们需要相互通信以完成业务逻辑。而注册中心则充当了服务之间的“黄页”，记录了所有可用的服务及其网络地址，方便其他服务进行查找和调用。</p><p>当⼀个新的服务启动时，它会向注册中心注册自己的网络地址和⼀些元数据信息（例如服务名称、版本号、健康状态等），注册中心会将这些信息存储在自己的数据中心中。当其他服务需要调用这个新服务时，它们可以通过向注册中心查询来获取该服务的地址和元数据信息，然后与该服务建立网络连接。 常见的注册中心包括 ZooKeeper、Consul、Eureka 、Nacos 等等</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240617202218429.png" alt="image-20240617202218429"></p><p><strong>如何实现一个注册中心</strong></p><ol><li>设计数据模型：设计注册中心的数据模型，包括服务的元数据信息、服务实例的网络地址等。</li><li>实现服务注册：当服务启动时，它需要向注册中心注册自己的元数据信息和网络地址。可以通过 REST API、 RPC 等方式实现服务的注册。</li><li>实现服务发现：当⼀个服务需要调用其他服务时，它需要向注册中心查询目标服务的网络地址。可以通过REST API、RPC 等方式实现服务的发现。</li><li>实现健康检查：为了保证服务的可用性，注册中心需要定期检查服务实例的健康状况，并将不健康的实例从服务列表中移除。</li><li>实现高可用：注册中心是⼀个分布式系统的核心组件，需要保证高可用性。可以采用主从复制、集群等方式实 现注册中心的高可用性。</li><li>实现安全机制：注册中心涉及到服务的元数据信息和网络地址等敏感信息，需要采取合适的安全措施。</li></ol><h3 id="7、什么是分布式的-BASE-理论，它与-CAP-理论有什么联系？">7、什么是分布式的 BASE 理论，它与 CAP 理论有什么联系？</h3><p>BASE 理论是对 CAP 理论的延伸，核心思想是即使无法做到强⼀致性（Strong Consistency，CAP 的⼀致性就是强 ⼀致性），但应用可以采用适合的方式达到最终⼀致性（Eventual Consitency）。</p><ul><li>Basically Available（基本可用）：分布式同再出现不可预知故障的时候，允许损失部分可用性。</li><li>Soft state（软状态）：软状态也称弱状态，和硬状态相对，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</li><li>Eventually consistent（最终⼀致性）：最终⼀致性强调的是系统中所有的数据副本，在经过⼀段时间上的同步后，最终能够达到⼀个⼀致的状态。因此，最终⼀致性的本质是需要系统保证最终数据能够达到⼀致，而不需要实时保证系统数据的强⼀致性。</li></ul><p><strong>CAP 与 BASE 关系</strong></p><p>BASE是对 CAP 中⼀致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的结论，是基于CAP定理逐步演化而来的，其核心思想是即使无法做到强⼀致性（Strong consistency），更具体地说，是对 CAP 中 AP方案的⼀个补充。其基本思路就是：通过业务，牺牲强⼀致性而获得可用性，并允许数据在⼀段时间内是不⼀致的，但是最终达到⼀致性状态。</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240617203016971.png" alt="image-20240617203016971"></p><h2 id="消息队列">消息队列</h2><h3 id="1、什么是消息队列？消息队列有哪些应用场景？">1、什么是消息队列？消息队列有哪些应用场景？</h3><p>消息队列是⼀种用于异步通信的机制，用于在不同的应用程序之间传递消息。消息队列通常由消息<strong>生产者、消息队列和消息消费者</strong>三部分组成。</p><p>消息生产者将消息发送到消息队列中，而消息消费者则从消息队列中接收消息。消息队列负责存储和管理消息，确保消息传递的可靠性和稳定性。在实现过程中，消息队列还会提供⼀些额外的功能，如消息过滤、消息路由、消息持久化等。</p><p><strong>消息队列的特点</strong>：</p><ul><li><strong>异步通信</strong>：消息生产者和消息消费者之间采用异步通信模式，发送方无需等待接收方的响应即可继续执行。</li><li><strong>解耦合</strong>：消息队列可以将消息生产者和消息消费者解耦合，使得它们之间的关系更加灵活。</li><li>**可靠性：**消息队列通常会提供⼀些保证消息传递可靠性的机制，如消息持久化、重试机制等。</li><li><strong>缓冲</strong>：消息队列可以缓冲来自多个消息生产者的消息，使得消息消费者可以按照自己的节奏进行消费，从而有效地平衡生产者和消费者之间的处理速度。</li></ul><p>消息队列的应用：</p><ul><li><strong>异步任务处理</strong>：通过将任务发送到消息队列中，异步处理任务，提高系统的并发性能和吞吐量。</li><li>**解耦合系统：**将不同的业务逻辑拆分成不同的服务，通过消息队列实现服务之间的通信，提高系统的可维护性和可扩展性。</li><li>**流量削峰：**将流量通过消息队列分散到不同的服务中，避免单个服务被高并发流量打垮。</li><li>**日志收集：**通过将日志消息发送到消息队列中，将日志收集和分析与业务逻辑解耦合，提高系统的可靠性和可维护性。</li><li>**应用解耦：**将不同的应用程序通过消息队列进行集成，实现应用之间的解耦合和数据交换。</li></ul><h3 id="2、有哪些主流的消息队列，它们分别有什么优缺点、各自的适用场景是什么？">2、有哪些主流的消息队列，它们分别有什么优缺点、各自的适用场景是什么？</h3><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240618115738636.png" alt="image-20240618115738636"></p><h3 id="3、有哪些常见的消息队列模型？分别适用于什么场景？">3、有哪些常见的消息队列模型？分别适用于什么场景？</h3><ul><li><strong>点对点模型（Point-to-Point Model）：<strong>这种模型中，<strong>消息生产者</strong>将消息发送到</strong>⼀个队列</strong>中，<strong>消息消费者</strong>从该队列中接收消息。⼀<strong>个消息只会被⼀个消费者接收</strong>，消费者在处理完消息之后会从队列中删除它。这种模型适用于需要保证<strong>消息只被一个消费者处理的场景</strong>，例如<strong>订单系统、日志处理</strong>等。</li><li><strong>发布-订阅模型（Publish-Subscribe Model</strong>）：这种模型中，<strong>消息生产者</strong>将消息发送到<strong>⼀个主题（Topic</strong>） 中，多<strong>个消息消费者</strong>可以<strong>订阅</strong>该主题并接收到所有的消息。<strong>每个消息可以被多个消费者接收</strong>，消费者在处理完 消息之后不会从主题中删除它。这种模型适用于需要将<strong>消息广播给多个消费者的场景</strong>，例如<strong>新闻订阅、实时数据分析</strong>等。</li><li><strong>请求-应答模型（Request-Response Model）</strong>：这种模型中，<strong>消息生产者</strong>发送⼀个请求消息到⼀个队列中， <strong>消息消费者</strong>从该队列中接收请求并返回⼀个响应消息。<strong>⼀个请求只会被⼀个消费者接收并处理</strong>，处理完成后返 回响应消息给消息生产者。这种模型适用于需要<strong>请求-响应模式</strong>的场景，例如<strong>远程过程调用、微服务通信</strong>等。</li><li><strong>推拉模型（Push-Pull Model）</strong>：这种模型中，<strong>消息生产者将消息推送到⼀个队列中</strong>，<strong>消息消费者</strong>从该队列中<strong>拉取消息</strong>。消息生产者将消息发送到队列中，消费者按需从队列中拉取消息进行处理。这种模型适用于需要<strong>灵活控制消息消费速度的场景</strong>，例如<strong>数据采集、视频流传输</strong>等。</li></ul><p>可以将点对点模型和请求-应答模型结合使用，实现异步的 RPC 调用。另外，在选择消息队列模型时，还需要考虑 消息传输的可靠性、顺序性、延迟等因素。</p><h2 id="设计模式">设计模式</h2><h3 id="1、设计模式是什么？为什么要学习和使用设计模式？">1、设计模式是什么？为什么要学习和使用设计模式？</h3><p>设计模式：是⼀套经过反复使用的代码设计经验，目的是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p><p>项目中合理地运用设计模式可以完美解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式描述 了⼀个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因</p><p>设计模式分为三大类：</p><ul><li><strong>创建型模式</strong>：共5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li><li><strong>结构型模式</strong>：共7种：适配器模式、装饰器模式、代理模式、桥接模式、外观模式、组合模式、享元模式。</li><li>**行为型模式：**共11种：策略模式、模板方法模式、观察者模式、责任链模式、访问者模式、中介者模式、迭代器模式、命令模式、状态模式、备忘录模式、解释器模式。</li></ul><h3 id="2、什么是单例模式？使用单例模式有什么好处？有哪些常用的单例模式实现方式？各自的应用场景是什么？">2、什么是单例模式？使用单例模式有什么好处？有哪些常用的单例模式实现方式？各自的应用场景是什么？</h3><p>单例模式是⼀种<strong>创建型设计模式</strong>，它确保<strong>⼀个类只有⼀个实例</strong>，并提供⼀个全局访问点来访问该实例。单例模式的目的是<strong>确保类的⼀个唯⼀实例</strong>，因此其他类可以轻松地从⼀个可知的地方访问它。</p><p>单例模式有以下好处</p><ul><li>**节省系统资源：**在系统中，如果有多个实例会造成资源浪费，而使用单例模式可以减少这种浪费。</li><li><strong>简化了对象访问</strong>：单例模式提供了⼀个<strong>全局的访问点</strong>，因此可以简化访问过程。</li></ul><p>常见的单例模式实现方式</p><ul><li><strong>饿汉式单例模式：<strong>在类</strong>加载</strong>时创建单例对象。缺点是<strong>不支持延迟加载</strong>。</li><li><strong>懒汉式单例模式</strong>：在<strong>第⼀次使用</strong>时才创建单例对象。缺点是<strong>需要考虑线程安全问题</strong>。</li><li><strong>双重检查锁单例模式：<strong>在</strong>第⼀次使用时</strong>创建单例对象，并使用<strong>双重检查锁</strong>定来确保线程安全。</li><li><strong>枚举单例模式：<strong>在枚举类型中创建单例对象，可以</strong>防止反射和序列化攻击</strong>。</li></ul><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240619193225873.png" alt="image-20240619193225873"></p><p>应用场景</p><ul><li><strong>数据库连接池：<strong>通过</strong>单例模式</strong>，可以确保系统中只有⼀个数据库连接池。</li><li>**日志记录器：**可以使用单例模式记录系统日志，这样可以确保系统中只有⼀个日志记录器。</li><li><strong>配置文件管理器：<strong>可以使用</strong>单例模式</strong>来<strong>管理应用程序的配置文件</strong>，这样可以避免重复读取配置文件的开销。</li><li><strong>线程池：<strong>可以使用</strong>单例模式</strong>来确保系统中只有⼀个线程池。</li></ul><h3 id="4、什么是工厂模式？使用工厂模式有什么好处？工厂模式有哪些分类？各自的应用场景是什么？">4、什么是工厂模式？使用工厂模式有什么好处？工厂模式有哪些分类？各自的应用场景是什么？</h3><p>工厂模式</p><ul><li>把对象的构造交给⼀个类,这样在对象构造过程中,调用者不需要知道对象的产生过程。降低了代码的耦合度，同时体现了面向对象的封装的特征。</li><li>好处<ul><li>松耦合</li><li>封装</li><li>可拓展</li><li>复用</li></ul></li></ul><p>分类</p><ul><li><p><strong>简单工厂模式 （⼀个工厂生产所有的对象 ）</strong></p><ul><li>如果它负责的对象太多，简单工厂容易庞大，变成超级类。</li><li>简单⼯⼚的拓展是竖向拓展（拓展需要访问⼯⼚内部，职责不够单⼀）</li><li>因此，他适合在’简单场景’ - 对象少且固定</li></ul></li><li><p><strong>工厂方法模式（一个工厂一个对象）</strong></p><ul><li>工厂方法是横向拓展，由于工厂对象1对1，耦合度没有任何减少，要生产类就要知道那个对应的工厂。</li><li>当需要生产新的产品时，⽆需更改既有的工厂，只需要添加新的工厂即可。保持了面向对象的可扩展性(纵向，横向都很不错)，符合开闭原则。</li><li>因此，工厂方法模式适用于对象多而且可能增加的场景。</li></ul></li><li><p><strong>抽象工厂模式 （ 抽象接口工厂实现 ）</strong></p><ul><li>抽象工厂是定义了⼀个接口，然后由具体工厂去实现抽象方法，突出特点就是运用了多态，耦合够松。</li><li>缺点也很明显，在接口不变的情况下，无论是横向拓展性还是松耦合都很好，但是⼀旦接口有新的功能增加， 所有的工厂实现都需要纵向拓展。即横向拓展能⼒强，但是纵向拓展能⼒=0</li><li>因此，抽象工厂模式适合产品族（即有相似属性）的生产</li></ul></li></ul><h2 id="并发编程">并发编程</h2><h3 id="1、并发和并行有什么区别？同步和异步有什么区别？">1、并发和并行有什么区别？同步和异步有什么区别？</h3><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240620104952051.png" alt="image-20240620104952051"></p><h3 id="2、什么是-BIO、NIO、AIO？">2、什么是 BIO、NIO、AIO？</h3><p>BIO、NIO、AIO 都是 Java 中网络编程的 I/O 模型。</p><ul><li>BIO（Blocking IO ）是JDK1.4之前的传统IO模型，特点就是<strong>同步阻塞等待数据</strong>，直到数据读取完毕才会返回结果， 线程会⼀直阻塞在 read/write 方法上，不能处理其他的 IO 请求，它的并<strong>发性能比较差</strong>。</li><li>NIO（Non-Blocking IO）是Java 1.4 之后新增的 IO 模型，它⽀持<strong>同步非阻塞式的 IO 操作</strong>。NIO 采用了多<strong>路复用器</strong>来处理 IO 请求，通过⼀个线程处理多个 IO 请求，实现了高并发处理。NIO 主要有三个核心概念：Selector、 Channel、Buffer。Selector 负责监听多个 Channel 上的事件，Channel 可以理解为对原始 IO 的封装，Buffer 则 是对数据的封装。</li><li>AIO（Asynchronous IO）是Java 1.7 之后新增的 IO 模型，它⽀持<strong>异步非阻塞 IO 操作</strong>。与 NIO 不同的是，AIO 在 进行读写操作时不需要像 NIO ⼀样⼀直轮询，而是通过回调函数的方式在数据准备好后通知应用程序进行数据的读取，这样可以更加高效地利用系统资源，提高吞吐量。但是 AIO 在处理<strong>小文件和小数据量时的性能并不如 NIO</strong>。</li></ul><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240620105909560.png" alt="image-20240620105909560"></p><h3 id="3、线程的生命周期是什么，线程有几种状态，什么是上下文切换？">3、线程的生命周期是什么，线程有几种状态，什么是上下文切换？</h3><p>从传统操作系统层面，线程有五大基本状态，包括：<strong>创建、就绪、运行、阻塞和终止状态</strong>。</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240620110002639.png" alt="image-20240620110002639"></p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240620110013914.png" alt="image-20240620110013914"></p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240620110025500.png" alt="image-20240620110025500"></p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240620110034664.png" alt="image-20240620110034664"></p><p><strong>上下文切换:</strong></p><p>指将当前线程的状态保存下来，并将 CPU 资源切换到另⼀个线程上运行的过程，通常由操作系统进行管理和控制的。需要注意，上下文切换需要花费⼀定的时间和系统资源，线程的上下文切换次数要尽量减少，以提高系统的性能。</p><h3 id="4、synchronized-关键字是什么，有什么作用？">4、synchronized 关键字是什么，有什么作用？</h3><ul><li>synchronized 是 Java 中的⼀个关键字，用于实<strong>现线程同步</strong>。具体来说，synchronized 用于<strong>修饰方法或代码块</strong>， 使得<strong>同⼀时刻只能有⼀个线程访问被修饰的代码</strong>，其他线程需要等待当前线程执行完毕后才能访问。</li><li>synchronized 主要用于解决<strong>多线程并发访问共享资源时</strong>出现的<strong>线程安全问题</strong>。</li><li>如果多个线程同时访问⼀个共享资源，就会出现多个线程同时修改这个资源的情况，从而导致数据不⼀致等问题。 而使用synchronized 可以保证<strong>同⼀时刻只有⼀个线程访问该资源</strong>，从而避免了线程安全问题。</li><li>synchronized 的作用不仅限于线程同步，它还可以保证<strong>可见性和有序性</strong>，即保证在同⼀个锁上，⼀个线程<strong>修改了共享变量的值之后，另⼀个线程能够立即看到修改后的值，并且在多个线程执行顺序上保证了⼀致性。</strong></li><li>需要注意的是，使用 synchronized 会带来⼀定的<strong>性能损失</strong>，因为<strong>每次进⼊同步块时都需要获得锁</strong>，这会增加线程的等待时间和上下文切换的开销。同时，如果同步块的<strong>代码执行时间很短</strong>，也会增加不必要的性能开销。因此，需 要根据具体情况来判断是否需要使用 synchronized。</li></ul><h2 id="系统设计">系统设计</h2><h3 id="1、如何设计⼀个点赞系统？">1、如何设计⼀个点赞系统？</h3><p><strong>从需求上面</strong></p><ul><li>点赞类别：帖子、评论、or 其他。</li><li>点赞限制<ul><li>仅登录用户还是游客都可以点赞？</li><li>可以⽆限点赞还是每个用户仅限点1次？</li></ul></li><li>点赞是否通知用户<ul><li>通知频率：每次点赞都通知 1 次，还是满 5 次合并通知1 次</li><li>通知样式：点赞帖子和点赞评论，通知的内容要怎么区分显示</li></ul></li></ul><p><strong>从数据库设计上</strong></p><ul><li>点赞数量：是单独一张表？还是在帖⼦表直接加⼀个字段？<ul><li>（前者的好处是，这样如果例如有其他类别的内容需要加点赞功能，就不用再修改数据库，后者的好处 是后台统计功能方便查数据，不需要查两张表）</li></ul></li><li>点赞记录表：记录点赞操作记录，哪个用户点赞了哪个帖子。</li></ul><p><strong>从性能设计考虑</strong></p><ul><li>点赞是个高频操作，肯定不能每次都直接操作数据库，需要加⼀层缓存</li><li>是单独独立⼀个key，如 {post_id}_like_num 记录</li><li>还是随着跟其他数量字段，⼀起构造⼀个key 如 {post_info}_num ⼀个hash字段</li><li>这里的设计会影响如何保持数据库和缓存⼀致性的问题</li></ul><p><strong>一致性考虑</strong></p><ul><li>看是否需要强⼀致性，如果不需要的话，就不需要加锁，这样可以减轻实现负担和提高⼀定的系统性能。</li></ul><h3 id="2、如何在-10-亿个数据中找到最大的-1-万个？（提示：最小堆）。">2、如何在 10 亿个数据中找到最大的 1 万个？（提示：最小堆）。</h3><p>使用最小堆来解决:</p><p>使用最小堆来解决: ⾸先，我们可以把这 10 亿个数据划分成多个小数据块，每个小数据块包含 1 万个数据。然后，我们可以遍历这些小数据块，对于每个小数据块，我们可以构建⼀个大小为 1 万的最小堆。当遍历到⼀个新的数据时，我们可以把它 与最小堆的堆顶元素进行比较。如果这个数据比堆顶元素大，那么我们可以把堆顶元素删除，并把这个数据插⼊到 最小堆中。这样，当我们遍历完所有的小数据块之后，最小堆中存储的就是最大的 1 万个数据了。</p><p>具体实现过程如下</p><ul><li>初始化⼀个大小为 1 万的最小堆，把第⼀个小数据块的数据插⼊到堆中。</li><li>读取下⼀个小数据块的数据，把这些数据依次与最小堆的堆顶元素进行比较。<ul><li>如果数据比堆顶元素大，那么删除堆顶元素，并把这个数据插⼊到堆中。</li><li>如果数据比堆顶元素小，那么忽略这个数据。</li></ul></li><li>重复步骤 2 直到所有的小数据块都被遍历完。 2. 最终，最小堆中存储的就是最大的 1 万个数据。</li></ul><p>这种方法的时间复杂度是 O(NlogK)，其中 N 是数据总数，K 是需要找到的最大的数据数量。因为最小堆的大小是 固定的，所以时间复杂度与数据总数 N 没有关系，只与需要找到的数据数量 K 有关系。因此，这种方法可以快速 找到最大的 1 万个数据，而且可以处理⾮常大的数据集。</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240624211246198.png" alt="image-20240624211246198"></p><h3 id="3、有几台机器存储着几亿的淘宝搜索日志，假设你只有⼀台-2g-的电脑，-如何选出搜索热度最高的⼗个关键词？">3、有几台机器存储着几亿的淘宝搜索日志，假设你只有⼀台 2g 的电脑， 如何选出搜索热度最高的⼗个关键词？</h3><ul><li><p>对于 <strong>top k 类文本问题</strong>，通常比较好的方案是**【分治+hash/trie 树+小顶堆】<strong>，即先按照 hash 方法把数据集分解成多个</strong>小数据集，<strong>然后使用 trie 树或者 hash 统计每个</strong>小数据集中的词频**，随后用<strong>小顶堆</strong>求出<strong>每个数据集中出现频率最高的前 K 个数</strong>，最后在所有 top K 中求出最终的 top K。</p></li><li><p><strong>拆分成 n 多个文件</strong>：以<strong>⾸字母区分</strong>，不同⾸字母放在不同文件，如果某个文件长度仍过长，继续<strong>按照次⾸字母</strong>进行拆分。这样⼀来，每个文件的每个数据长度基本相同且⾸字母相同，就能保证数据被独立的分为了 n 个文件，且各个文件中不存在关键词的交集。</p></li></ul><p>**分别词频统计：**对于每个文件，使用 hash 或者 Trie 树进行进行词频统计.。</p><p><strong>小顶堆排序</strong>：依次处理每个文件，并逐渐更新最大的⼗个词</p><h2 id="JVM">JVM</h2><h3 id="1、请你介绍下-JVM-内存模型，分为哪些区域？各区域的作用是什么？">1、请你介绍下 JVM 内存模型，分为哪些区域？各区域的作用是什么？</h3><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240629205643935.png" alt="image-20240629205643935"></p><p>堆：</p><ul><li>堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在 JVM 启动的时候被创建。对象所占的堆 内存是由自动内存管理系统也就是垃圾收集器回收。</li></ul><p>虚拟机栈：</p><ul><li>每个线程运行时所需要的内存，称为虚拟机栈 每个栈由多个栈帧（Frame）组成，对应着每次方法调 用时所占用的内存 每个线程只能有⼀个活动栈帧，对应着当前正在执行的那个方法。</li></ul><p>本地方法栈：</p><ul><li>与虚拟机栈发挥的作用相似，相比于虚拟机栈为Java方法服务，本地方法栈为虚拟机使用的Native方法服务， 执行每个本地方法的时候，都会创建⼀个栈帧用于存储局部变量表，操作数栈，动态链接，方法出⼝等信息。</li></ul><p>程序计数器（PC寄存器）</p><ul><li>程序计数器区域是⼀块较小的区域，它用于存储线程的每个执行指令，每个线程都有自⼰的程序计数器</li></ul><p>方法区（元空间）：</p><ul><li>方法区是可提供各条线程共享的运行时内存区域。存储了每⼀个类的结构信息，例如运行时常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容，还包括⼀些在类、实例、接⼝初始 化时用到的特殊方法。在JDK1.8之前的版本⾥，代表JVM的⼀块区域。在1.8版本以后，这块区域的名字改 了，叫做“Matespace”</li></ul><h3 id="2、什么是双亲委派模式？有什么作用？">2、什么是双亲委派模式？有什么作用？</h3><p><strong>双亲委派模式（<strong>Parent-Delegate Model）是 <strong>Java 类加载器</strong>（ClassLoader）在</strong>加载类</strong>时所采用的⼀种<strong>设计模式</strong>。</p><p>这种模式的核心思想是：当⼀个<strong>类加载器</strong>收到类加载请求时，⾸先<strong>不会尝试自⼰加载这个类</strong>，而是将请求<strong>委派给其⽗类加载器</strong>。依次递归，直到最顶层的启动类加载器（Bootstrap ClassLoader）；<strong>如果⽗类加载器⽆法加载该 类，⼦类加载器才尝试自⼰去加载。</strong></p><p><strong>作用</strong>：</p><ul><li><strong>避免重复加载类</strong>：如果⼀个类已经被某个类加载器加载过了，那么其他类加载器就不需要再次加载该类，因为 类的定义只需要加载⼀次就可以了。</li><li><strong>确保类的唯⼀性</strong>：通过双亲委派模式，可以保证不同的类加载器加载同⼀个类时，得到的都是同⼀个 Class 对 象，从而保证了类的唯⼀性。</li><li><strong>安全性</strong>：通过双亲委派模式，可以保证核心 Java API 不会被⾮法替换，从而提高了 Java 应用的安全性。</li></ul><h3 id="3、常见的垃圾回收算法有⼏种类型？他们对应的优缺点是什么？">3、常见的垃圾回收算法有⼏种类型？他们对应的优缺点是什么？</h3><p><strong>常见的垃圾回收算法：</strong></p><ul><li><p><strong>Mark-Sweep（标记-清除）算法</strong></p><p>标记-清除算法分为两个阶段：标记阶段和清除阶段。标记阶段的任务是首先通过可达性分析，标记出所有需要回收的对象，清除阶段就是回收被标记的对象所占用的空间。</p><p>优点：速度较快；缺点：内存不连续，会造成内存碎片，碎片太多可能会导致后续过程中需要为大对象分配空 间时⽆法找到足够的空间而提前触发新的⼀次垃圾收集动作。</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240701171619848.png" alt="image-20240701171619848"></p></li><li><p><strong>Coping（复制）算法</strong></p><p>为了解决Mark-Sweep算法的缺陷，他将可用内存按照容量划分为大小相等的两块，每次只使用⼀块。当这⼀块的内存用完了，就将还存活的对象复制到另⼀块上面，然后再把已使用的内存空间⼀次清理掉，这样⼀来就 不容易出现内存碎⽚的问题。</p><p>这种算法虽然实现简单，运行高效且不容易产生内存碎⽚，但是却对内存空间的使用做出了高昂的代价，因为 能够使用的内存缩减到原来的⼀半。很显然，Copying算法的效率跟存活对象的数目多少有很大的关系，如果 存活对象很多，那么Copying算法的效率将会大大降低。</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240701171720555.png" alt="image-20240701171720555"></p></li><li><p><strong>Mark-Compact（标记-整理）算法（压缩算法）</strong></p><p>为了解决Copying算法的缺陷，充分利用内存空间，提出了Mark-Compact算法。该算法标记阶段和MarkSweep⼀样，但是在完成标记之后，他不是直接清理可回收对象，而是将存活对象都向⼀端移动，然后清理 掉端边界以外的内存</p><p><img src="C:%5CUsers%5CThinkBook%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240701171804805.png" alt="image-20240701171804805"></p></li><li><p><strong>Generation Collection（分代收集）算法</strong></p><ul><li><p>分代收集算法是目前大部分JVM的垃圾回收器采用的算法。他的核心思想是根据对象存活的生命周期将内存划分为若⼲个不同的区域。⼀般情况下将堆区划分为<strong>老年代（Tenured Generation）和新生代</strong>（Young Generation），老年代的特点是每次垃圾回收时，只有少数对象需要被回收，而新生代的特点是每次垃圾回 收时都有大量的对象需要被回收。</p></li><li><p>目前大部分垃圾回收器对于<strong>新生代都采取复制算法</strong>，因为新生代中每次垃圾回收都要回收大部分对象，也就是说需要复制的操作次数较少，但实际上不是按照1：1的比例来划分新生代的空间，⼀般来说是将新生代划分为<strong>⼀块较大的Eden空间和两块较小的Survivor空间</strong>，每次使用Eden空间和其中的⼀块Survivor空间。当新生代的Eden Space和From Space空间不足时就会发生⼀次GC，进行GC后，Eden Space和From Space区的存 活对象会被挪到To Space，然后将Eden Space和From Space进行清理。如果To Space⽆法足够存储某个对象，则将这个对象<strong>存储到老生代</strong>。在进行GC后，使用的便是Eden Space和To Space了，如此反复循环。当对 象在Survivor区躲过⼀次GC后，其年龄就会+1。默认情况下年龄到达15的对象会被移到老年代中。</p></li><li><p>而由于⽼年代的特点是每次回收都只回收少量对象，⼀般使⽤的是<strong>标记-整理算法（压缩法）</strong>，当⽼年代空间不足，会先尝试触发 minor gc，如果之后空间仍不足，那么触发 full gc，STW的时间更⻓</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试整理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
